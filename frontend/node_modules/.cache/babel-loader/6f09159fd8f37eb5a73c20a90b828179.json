{"ast":null,"code":"var Range, _;\n_ = require('lodash');\nRange = function () {\n  Range.compare = function (r1, r2) {\n    if (r1 === r2) {\n      return true;\n    }\n    if (!(r1 != null && r2 != null)) {\n      return false;\n    }\n    return r1.equals(r2);\n  };\n  function Range(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n  Range.prototype.equals = function (range) {\n    if (range == null) {\n      return false;\n    }\n    return this.start === range.start && this.end === range.end;\n  };\n  Range.prototype.shift = function (index, length) {\n    var _ref;\n    return _ref = _.map([this.start, this.end], function (pos) {\n      if (index > pos) {\n        return pos;\n      }\n      if (length >= 0) {\n        return pos + length;\n      } else {\n        return Math.max(index, pos + length);\n      }\n    }), this.start = _ref[0], this.end = _ref[1], _ref;\n  };\n  Range.prototype.isCollapsed = function () {\n    return this.start === this.end;\n  };\n  return Range;\n}();\nmodule.exports = Range;","map":null,"metadata":{},"sourceType":"script"}