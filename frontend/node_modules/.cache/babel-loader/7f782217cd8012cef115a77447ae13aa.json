{"ast":null,"code":"var Normalizer, Quill, Tooltip, dom, _;\nQuill = require('../quill');\nNormalizer = require('../lib/normalizer');\n_ = Quill.require('lodash');\ndom = Quill.require('dom');\nTooltip = function () {\n  Tooltip.DEFAULTS = {\n    offset: 10,\n    styles: {\n      '.tooltip': {\n        'background-color': '#fff',\n        'border': '1px solid #000',\n        'top': '0px',\n        'white-space': 'nowrap',\n        'z-index': '2000'\n      },\n      '.tooltip a': {\n        'cursor': 'pointer',\n        'text-decoration': 'none'\n      }\n    },\n    template: ''\n  };\n  Tooltip.HIDE_MARGIN = '-10000px';\n  function Tooltip(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    this.quill.addStyles(this.options.styles);\n    this.container = this.quill.addContainer('tooltip');\n    this.container.innerHTML = Normalizer.stripWhitespace(this.options.template);\n    this.container.style.position = 'absolute';\n    dom(this.quill.root).on('focus', _.bind(this.hide, this));\n    this.hide();\n    this.quill.on(this.quill.constructor.events.TEXT_CHANGE, function (_this) {\n      return function (delta, source) {\n        if (source === 'user' && _this.container.style.left !== Tooltip.HIDE_MARGIN) {\n          _this.range = null;\n          return _this.hide();\n        }\n      };\n    }(this));\n  }\n  Tooltip.prototype.initTextbox = function (textbox, enterCallback, escapeCallback) {\n    return dom(textbox).on('keyup', function (_this) {\n      return function (event) {\n        switch (event.which) {\n          case dom.KEYS.ENTER:\n            return enterCallback.call(_this);\n          case dom.KEYS.ESCAPE:\n            return escapeCallback.call(_this);\n          default:\n            return true;\n        }\n      };\n    }(this));\n  };\n  Tooltip.prototype.hide = function () {\n    this.container.style.left = Tooltip.HIDE_MARGIN;\n    if (this.range) {\n      this.quill.setSelection(this.range);\n    }\n    return this.range = null;\n  };\n  Tooltip.prototype.show = function (reference) {\n    var left, top, win, _ref, _ref1;\n    this.range = this.quill.getSelection();\n    _ref = this._position(reference), left = _ref[0], top = _ref[1];\n    _ref1 = this._limit(left, top), left = _ref1[0], top = _ref1[1];\n    win = dom(this.quill.root).window();\n    left += win.pageXOffset;\n    top += win.pageYOffset;\n    this.container.style.left = \"\" + left + \"px\";\n    this.container.style.top = \"\" + top + \"px\";\n    return this.container.focus();\n  };\n  Tooltip.prototype._getBounds = function () {\n    var bounds, scrollX, scrollY, win;\n    bounds = this.quill.root.getBoundingClientRect();\n    win = dom(this.quill.root).window();\n    scrollX = win.pageXOffset;\n    scrollY = win.pageYOffset;\n    return {\n      left: bounds.left + scrollX,\n      right: bounds.right + scrollX,\n      top: bounds.top + scrollY,\n      bottom: bounds.bottom + scrollY,\n      width: bounds.width,\n      height: bounds.height\n    };\n  };\n  Tooltip.prototype._limit = function (left, top) {\n    var editorRect, toolbarRect;\n    editorRect = this._getBounds();\n    toolbarRect = this.container.getBoundingClientRect();\n    left = Math.min(editorRect.right - toolbarRect.width, left);\n    left = Math.max(editorRect.left, left);\n    top = Math.min(editorRect.bottom - toolbarRect.height, top);\n    top = Math.max(editorRect.top, top);\n    return [left, top];\n  };\n  Tooltip.prototype._position = function (reference) {\n    var editorRect, left, referenceBounds, toolbarRect, top;\n    toolbarRect = this.container.getBoundingClientRect();\n    editorRect = this._getBounds();\n    if (reference != null) {\n      referenceBounds = reference.getBoundingClientRect();\n      left = referenceBounds.left + referenceBounds.width / 2 - toolbarRect.width / 2;\n      top = referenceBounds.top + referenceBounds.height + this.options.offset;\n      if (top + toolbarRect.height > editorRect.bottom) {\n        top = referenceBounds.top - toolbarRect.height - this.options.offset;\n      }\n    } else {\n      left = editorRect.left + editorRect.width / 2 - toolbarRect.width / 2;\n      top = editorRect.top + editorRect.height / 2 - toolbarRect.height / 2;\n    }\n    return [left, top];\n  };\n  return Tooltip;\n}();\nQuill.registerModule('tooltip', Tooltip);\nmodule.exports = Tooltip;","map":null,"metadata":{},"sourceType":"script"}