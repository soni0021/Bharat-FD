{"ast":null,"code":"var _jsxFileName = \"/Users/manishsoni/BFD FAQ/frontend/src/components/FAQEditor/FAQEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Button, Card, message, Input, Modal, Select } from 'antd';\nimport axios from 'axios';\nimport LanguageSelector from '../LanguageSelector/LanguageSelector';\nimport './FAQEditor.css';\n\n// Define the limited language options for translation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TRANSLATION_OPTIONS = [{\n  value: 'en',\n  label: 'English'\n}, {\n  value: 'hi',\n  label: 'Hindi'\n}, {\n  value: 'bn',\n  label: 'Bengali'\n}];\nconst FAQEditor = () => {\n  _s();\n  const [faqs, setFaqs] = useState([]);\n  const [translatedFaqs, setTranslatedFaqs] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [selectedLang, setSelectedLang] = useState('en');\n  const [formData, setFormData] = useState({\n    question: '',\n    answer: '',\n    language: 'en'\n  });\n  const LANGUAGES = [{\n    code: 'en',\n    name: 'English'\n  }, {\n    code: 'hi',\n    name: 'Hindi'\n  }, {\n    code: 'bn',\n    name: 'Bengali'\n  }\n  // Add other languages as needed\n  ];\n  useEffect(() => {\n    fetchFAQs();\n  }, [selectedLang]);\n  const fetchFAQs = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/faqs?language=${selectedLang}`);\n      setFaqs(response.data);\n    } catch (err) {\n      message.error('Error fetching FAQs');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const payload = {\n      ...formData,\n      language: selectedLang\n    };\n    if (!payload.question || !payload.answer) {\n      message.error('Both question and answer are required.');\n      return;\n    }\n    try {\n      setLoading(true);\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/faqs`, payload);\n      message.success('FAQ created successfully!');\n      setFaqs(prevFaqs => [response.data, ...prevFaqs]);\n      setFormData({\n        question: '',\n        answer: '',\n        language: selectedLang\n      });\n    } catch (error) {\n      if (error.response) {\n        message.error(`Error: ${error.response.data.message}`);\n      } else {\n        message.error('Error creating FAQ');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDelete = async id => {\n    try {\n      setLoading(true);\n      await axios.delete(`${process.env.REACT_APP_API_URL}/faqs/${id}`);\n      setFaqs(faqs.filter(faq => faq._id !== id));\n      message.success('FAQ deleted successfully!');\n    } catch (error) {\n      message.error('Error deleting FAQ');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // When the user clicks \"Translate\", show a modal that allows them to pick the target language.\n  const handleTranslate = faq => {\n    // Exclude the FAQ's current language from the options so the user only sees the other available languages.\n    const availableOptions = TRANSLATION_OPTIONS.filter(opt => opt.value !== faq.language);\n    Modal.confirm({\n      title: 'Select Target Language',\n      icon: null,\n      content: /*#__PURE__*/_jsxDEV(Select, {\n        style: {\n          width: '100%'\n        },\n        placeholder: \"Select language\",\n        options: availableOptions,\n        onChange: value => {\n          performTranslation(faq, value);\n          Modal.destroyAll(); // Close the modal immediately after selection\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this),\n      okButtonProps: {\n        style: {\n          display: 'none'\n        }\n      },\n      cancelButtonText: 'Cancel'\n    });\n  };\n\n  // Function that calls the translation service and then updates the FAQ in the database.\n  const performTranslation = async (faq, targetLang) => {\n    try {\n      setLoading(true);\n      const translationUrl = process.env.REACT_APP_TRANSLATION_URL || 'http://localhost:8000';\n\n      // Translate question\n      const respQuestion = await axios.post(`${translationUrl}/translate`, {\n        text: faq.question,\n        dest: targetLang,\n        src: faq.language\n      });\n      // Translate answer\n      const respAnswer = await axios.post(`${translationUrl}/translate`, {\n        text: faq.answer,\n        dest: targetLang,\n        src: faq.language\n      });\n\n      // Update local state to show translated FAQ if needed.\n      setTranslatedFaqs(prev => ({\n        ...prev,\n        [faq._id]: {\n          ...prev[faq._id],\n          [targetLang]: {\n            question: respQuestion.data.translation,\n            answer: respAnswer.data.translation\n          }\n        }\n      }));\n\n      // Merge any existing translations with the new one.\n      const existingTranslations = faq.translations || {};\n      const updatedTranslations = {\n        ...existingTranslations,\n        [targetLang]: {\n          question: respQuestion.data.translation,\n          answer: respAnswer.data.translation\n        }\n      };\n\n      // Prepare payload to update the FAQ. Keep original question, answer, language, and update translations.\n      const updatedFaqPayload = {\n        question: faq.question,\n        answer: faq.answer,\n        language: faq.language,\n        translations: updatedTranslations\n      };\n\n      // Call the update API to push the updated translations to the database.\n      const updateResponse = await axios.put(`${process.env.REACT_APP_API_URL}/faqs/${faq._id}`, updatedFaqPayload);\n\n      // Update local FAQ state by replacing the item with the updated FAQ from the DB.\n      setFaqs(prevFaqs => prevFaqs.map(f => f._id === faq._id ? updateResponse.data : f));\n      message.success(`Translation for ${targetLang.toUpperCase()} saved to DB.`);\n    } catch (error) {\n      message.error('Error translating FAQ');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add this new handler function\n  const handleSaveTranslation = async (originalFaq, translation) => {\n    try {\n      // Get the first (and only) language key from translations\n      const [targetLang] = Object.keys(translation).filter(k => k !== '_id');\n\n      // Validate against known languages\n      if (!LANGUAGES.some(l => l.code === targetLang)) {\n        throw new Error('Invalid target language');\n      }\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/faqs`, {\n        question: translation[targetLang].question,\n        answer: translation[targetLang].answer,\n        language: targetLang\n      });\n      message.success('Translated FAQ saved successfully!');\n      setFaqs(prev => [response.data, ...prev]);\n    } catch (error) {\n      message.error('Error saving translated FAQ');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      title: \"FAQ Manager\",\n      extra: /*#__PURE__*/_jsxDEV(LanguageSelector, {\n        value: selectedLang,\n        onChange: setSelectedLang,\n        style: {\n          width: 120\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 16\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"Enter question\",\n          value: formData.question,\n          onChange: e => setFormData({\n            ...formData,\n            question: e.target.value\n          }),\n          className: \"input-field\",\n          style: {\n            marginBottom: 16\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input.TextArea, {\n          placeholder: \"Enter answer\",\n          value: formData.answer,\n          onChange: e => setFormData({\n            ...formData,\n            answer: e.target.value\n          }),\n          className: \"input-field\",\n          rows: 4,\n          style: {\n            marginBottom: 16\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          loading: loading,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"faq-list\",\n        style: {\n          marginTop: 24\n        },\n        children: faqs.map(faq => {\n          var _translatedFaqs$faq$_, _translatedFaqs$faq$_2;\n          return /*#__PURE__*/_jsxDEV(Card, {\n            style: {\n              marginTop: 16\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: ((_translatedFaqs$faq$_ = translatedFaqs[faq._id]) === null || _translatedFaqs$faq$_ === void 0 ? void 0 : _translatedFaqs$faq$_.question) || faq.question\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"language-tag\",\n                children: faq.language.toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"answer-content\",\n              children: [translatedFaqs[faq._id] && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"translation-actions\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  type: \"primary\",\n                  size: \"small\",\n                  onClick: () => handleSaveTranslation(faq, translatedFaqs[faq._id]),\n                  children: \"Save as New FAQ\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"translation-language\",\n                  children: [\"(\", Object.keys(translatedFaqs[faq._id]).find(k => k !== '_id'), \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 19\n              }, this), ((_translatedFaqs$faq$_2 = translatedFaqs[faq._id]) === null || _translatedFaqs$faq$_2 === void 0 ? void 0 : _translatedFaqs$faq$_2.answer) || faq.answer]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginTop: 8\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                type: \"link\",\n                onClick: () => handleTranslate(faq),\n                children: \"Translate\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"link\",\n                danger: true,\n                onClick: () => handleDelete(faq._id),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }, this)]\n          }, faq._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n_s(FAQEditor, \"CVcUI9Ap9qbPAi2/mv/+C7PBBVg=\");\n_c = FAQEditor;\nexport default FAQEditor;\nvar _c;\n$RefreshReg$(_c, \"FAQEditor\");","map":{"version":3,"names":["React","useState","useEffect","Button","Card","message","Input","Modal","Select","axios","LanguageSelector","jsxDEV","_jsxDEV","TRANSLATION_OPTIONS","value","label","FAQEditor","_s","faqs","setFaqs","translatedFaqs","setTranslatedFaqs","loading","setLoading","selectedLang","setSelectedLang","formData","setFormData","question","answer","language","LANGUAGES","code","name","fetchFAQs","response","get","process","env","REACT_APP_API_URL","data","err","error","handleSubmit","e","preventDefault","payload","post","success","prevFaqs","handleDelete","id","delete","filter","faq","_id","handleTranslate","availableOptions","opt","confirm","title","icon","content","style","width","placeholder","options","onChange","performTranslation","destroyAll","fileName","_jsxFileName","lineNumber","columnNumber","okButtonProps","display","cancelButtonText","targetLang","translationUrl","REACT_APP_TRANSLATION_URL","respQuestion","text","dest","src","respAnswer","prev","translation","existingTranslations","translations","updatedTranslations","updatedFaqPayload","updateResponse","put","map","f","toUpperCase","handleSaveTranslation","originalFaq","Object","keys","k","some","l","Error","className","children","extra","onSubmit","target","marginBottom","TextArea","rows","type","htmlType","marginTop","_translatedFaqs$faq$_","_translatedFaqs$faq$_2","size","onClick","find","danger","_c","$RefreshReg$"],"sources":["/Users/manishsoni/BFD FAQ/frontend/src/components/FAQEditor/FAQEditor.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, Card, message, Input, Modal, Select } from 'antd';\nimport axios from 'axios';\nimport LanguageSelector from '../LanguageSelector/LanguageSelector';\nimport './FAQEditor.css';\n\n// Define the limited language options for translation\nconst TRANSLATION_OPTIONS = [\n  { value: 'en', label: 'English' },\n  { value: 'hi', label: 'Hindi' },\n  { value: 'bn', label: 'Bengali' }\n];\n\nconst FAQEditor = () => {\n  const [faqs, setFaqs] = useState([]);\n  const [translatedFaqs, setTranslatedFaqs] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [selectedLang, setSelectedLang] = useState('en');\n  const [formData, setFormData] = useState({\n    question: '',\n    answer: '',\n    language: 'en'\n  });\n\n  const LANGUAGES = [\n    { code: 'en', name: 'English' },\n    { code: 'hi', name: 'Hindi' },\n    { code: 'bn', name: 'Bengali' }\n    // Add other languages as needed\n  ];\n\n  useEffect(() => {\n    fetchFAQs();\n  }, [selectedLang]);\n\n  const fetchFAQs = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/faqs?language=${selectedLang}`);\n      setFaqs(response.data);\n    } catch (err) {\n      message.error('Error fetching FAQs');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const payload = {\n      ...formData,\n      language: selectedLang\n    };\n    if (!payload.question || !payload.answer) {\n      message.error('Both question and answer are required.');\n      return;\n    }\n    try {\n      setLoading(true);\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/faqs`, payload);\n      message.success('FAQ created successfully!');\n      setFaqs(prevFaqs => [response.data, ...prevFaqs]);\n      setFormData({ question: '', answer: '', language: selectedLang });\n    } catch (error) {\n      if (error.response) {\n        message.error(`Error: ${error.response.data.message}`);\n      } else {\n        message.error('Error creating FAQ');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDelete = async (id) => {\n    try {\n      setLoading(true);\n      await axios.delete(`${process.env.REACT_APP_API_URL}/faqs/${id}`);\n      setFaqs(faqs.filter(faq => faq._id !== id));\n      message.success('FAQ deleted successfully!');\n    } catch (error) {\n      message.error('Error deleting FAQ');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // When the user clicks \"Translate\", show a modal that allows them to pick the target language.\n  const handleTranslate = (faq) => {\n    // Exclude the FAQ's current language from the options so the user only sees the other available languages.\n    const availableOptions = TRANSLATION_OPTIONS.filter(opt => opt.value !== faq.language);\n\n    Modal.confirm({\n      title: 'Select Target Language',\n      icon: null,\n      content: (\n        <Select\n          style={{ width: '100%' }}\n          placeholder=\"Select language\"\n          options={availableOptions}\n          onChange={(value) => {\n            performTranslation(faq, value);\n            Modal.destroyAll(); // Close the modal immediately after selection\n          }}\n        />\n      ),\n      okButtonProps: { style: { display: 'none' } },\n      cancelButtonText: 'Cancel'\n    });\n  };\n\n  // Function that calls the translation service and then updates the FAQ in the database.\n  const performTranslation = async (faq, targetLang) => {\n    try {\n      setLoading(true);\n      const translationUrl = process.env.REACT_APP_TRANSLATION_URL || 'http://localhost:8000';\n\n      // Translate question\n      const respQuestion = await axios.post(`${translationUrl}/translate`, {\n        text: faq.question,\n        dest: targetLang,\n        src: faq.language\n      });\n      // Translate answer\n      const respAnswer = await axios.post(`${translationUrl}/translate`, {\n        text: faq.answer,\n        dest: targetLang,\n        src: faq.language\n      });\n\n      // Update local state to show translated FAQ if needed.\n      setTranslatedFaqs(prev => ({\n        ...prev,\n        [faq._id]: {\n          ...prev[faq._id],\n          [targetLang]: {\n            question: respQuestion.data.translation,\n            answer: respAnswer.data.translation\n          }\n        }\n      }));\n\n      // Merge any existing translations with the new one.\n      const existingTranslations = faq.translations || {};\n      const updatedTranslations = {\n        ...existingTranslations,\n        [targetLang]: {\n          question: respQuestion.data.translation,\n          answer: respAnswer.data.translation\n        }\n      };\n\n      // Prepare payload to update the FAQ. Keep original question, answer, language, and update translations.\n      const updatedFaqPayload = {\n        question: faq.question,\n        answer: faq.answer,\n        language: faq.language,\n        translations: updatedTranslations\n      };\n\n      // Call the update API to push the updated translations to the database.\n      const updateResponse = await axios.put(`${process.env.REACT_APP_API_URL}/faqs/${faq._id}`, updatedFaqPayload);\n\n      // Update local FAQ state by replacing the item with the updated FAQ from the DB.\n      setFaqs(prevFaqs => prevFaqs.map(f => f._id === faq._id ? updateResponse.data : f));\n      message.success(`Translation for ${targetLang.toUpperCase()} saved to DB.`);\n    } catch (error) {\n      message.error('Error translating FAQ');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add this new handler function\n  const handleSaveTranslation = async (originalFaq, translation) => {\n    try {\n      // Get the first (and only) language key from translations\n      const [targetLang] = Object.keys(translation).filter(k => k !== '_id'); \n      \n      // Validate against known languages\n      if (!LANGUAGES.some(l => l.code === targetLang)) {\n        throw new Error('Invalid target language');\n      }\n\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/faqs`, {\n        question: translation[targetLang].question,\n        answer: translation[targetLang].answer,\n        language: targetLang\n      });\n      message.success('Translated FAQ saved successfully!');\n      setFaqs(prev => [response.data, ...prev]);\n    } catch (error) {\n      message.error('Error saving translated FAQ');\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <Card\n        title=\"FAQ Manager\"\n        extra={<LanguageSelector value={selectedLang} onChange={setSelectedLang} style={{ width: 120 }} />}\n      >\n        <form onSubmit={handleSubmit}>\n          <Input\n            placeholder=\"Enter question\"\n            value={formData.question}\n            onChange={(e) => setFormData({ ...formData, question: e.target.value })}\n            className=\"input-field\"\n            style={{ marginBottom: 16 }}\n          />\n          <Input.TextArea\n            placeholder=\"Enter answer\"\n            value={formData.answer}\n            onChange={(e) => setFormData({ ...formData, answer: e.target.value })}\n            className=\"input-field\"\n            rows={4}\n            style={{ marginBottom: 16 }}\n          />\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>Submit</Button>\n        </form>\n\n        <div className=\"faq-list\" style={{ marginTop: 24 }}>\n          {faqs.map(faq => (\n            <Card key={faq._id} style={{ marginTop: 16 }}>\n              <div className=\"card-header\">\n                <h3>{translatedFaqs[faq._id]?.question || faq.question}</h3>\n                <div className=\"language-tag\">{faq.language.toUpperCase()}</div>\n              </div>\n              <div className=\"answer-content\">\n                {translatedFaqs[faq._id] && (\n                  <div className=\"translation-actions\">\n                    <Button \n                      type=\"primary\" \n                      size=\"small\"\n                      onClick={() => handleSaveTranslation(faq, translatedFaqs[faq._id])}\n                    >\n                      Save as New FAQ\n                    </Button>\n                    <span className=\"translation-language\">\n                      ({Object.keys(translatedFaqs[faq._id]).find(k => k !== '_id')})\n                    </span>\n                  </div>\n                )}\n                {translatedFaqs[faq._id]?.answer || faq.answer}\n              </div>\n              <div style={{ marginTop: 8 }}>\n                <Button type=\"link\" onClick={() => handleTranslate(faq)}>\n                  Translate\n                </Button>\n                <Button type=\"link\" danger onClick={() => handleDelete(faq._id)}>\n                  Delete\n                </Button>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n};\nexport default FAQEditor;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,MAAM,QAAQ,MAAM;AAClE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,gBAAgB,MAAM,sCAAsC;AACnE,OAAO,iBAAiB;;AAExB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,mBAAmB,GAAG,CAC1B;EAAEC,KAAK,EAAE,IAAI;EAAEC,KAAK,EAAE;AAAU,CAAC,EACjC;EAAED,KAAK,EAAE,IAAI;EAAEC,KAAK,EAAE;AAAQ,CAAC,EAC/B;EAAED,KAAK,EAAE,IAAI;EAAEC,KAAK,EAAE;AAAU,CAAC,CAClC;AAED,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACmB,cAAc,EAAEC,iBAAiB,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAACqB,OAAO,EAAEC,UAAU,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACyB,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAC;IACvC2B,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,MAAMC,SAAS,GAAG,CAChB;IAAEC,IAAI,EAAE,IAAI;IAAEC,IAAI,EAAE;EAAU,CAAC,EAC/B;IAAED,IAAI,EAAE,IAAI;IAAEC,IAAI,EAAE;EAAQ,CAAC,EAC7B;IAAED,IAAI,EAAE,IAAI;IAAEC,IAAI,EAAE;EAAU;EAC9B;EAAA,CACD;EAED/B,SAAS,CAAC,MAAM;IACdgC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACV,YAAY,CAAC,CAAC;EAElB,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACFX,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMY,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,kBAAkBf,YAAY,EAAE,CAAC;MAClGL,OAAO,CAACgB,QAAQ,CAACK,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZpC,OAAO,CAACqC,KAAK,CAAC,qBAAqB,CAAC;IACtC,CAAC,SAAS;MACRnB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMoB,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,MAAMC,OAAO,GAAG;MACd,GAAGpB,QAAQ;MACXI,QAAQ,EAAEN;IACZ,CAAC;IACD,IAAI,CAACsB,OAAO,CAAClB,QAAQ,IAAI,CAACkB,OAAO,CAACjB,MAAM,EAAE;MACxCxB,OAAO,CAACqC,KAAK,CAAC,wCAAwC,CAAC;MACvD;IACF;IACA,IAAI;MACFnB,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMY,QAAQ,GAAG,MAAM1B,KAAK,CAACsC,IAAI,CAAC,GAAGV,OAAO,CAACC,GAAG,CAACC,iBAAiB,OAAO,EAAEO,OAAO,CAAC;MACnFzC,OAAO,CAAC2C,OAAO,CAAC,2BAA2B,CAAC;MAC5C7B,OAAO,CAAC8B,QAAQ,IAAI,CAACd,QAAQ,CAACK,IAAI,EAAE,GAAGS,QAAQ,CAAC,CAAC;MACjDtB,WAAW,CAAC;QAAEC,QAAQ,EAAE,EAAE;QAAEC,MAAM,EAAE,EAAE;QAAEC,QAAQ,EAAEN;MAAa,CAAC,CAAC;IACnE,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACd,IAAIA,KAAK,CAACP,QAAQ,EAAE;QAClB9B,OAAO,CAACqC,KAAK,CAAC,UAAUA,KAAK,CAACP,QAAQ,CAACK,IAAI,CAACnC,OAAO,EAAE,CAAC;MACxD,CAAC,MAAM;QACLA,OAAO,CAACqC,KAAK,CAAC,oBAAoB,CAAC;MACrC;IACF,CAAC,SAAS;MACRnB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAM2B,YAAY,GAAG,MAAOC,EAAE,IAAK;IACjC,IAAI;MACF5B,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMd,KAAK,CAAC2C,MAAM,CAAC,GAAGf,OAAO,CAACC,GAAG,CAACC,iBAAiB,SAASY,EAAE,EAAE,CAAC;MACjEhC,OAAO,CAACD,IAAI,CAACmC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,GAAG,KAAKJ,EAAE,CAAC,CAAC;MAC3C9C,OAAO,CAAC2C,OAAO,CAAC,2BAA2B,CAAC;IAC9C,CAAC,CAAC,OAAON,KAAK,EAAE;MACdrC,OAAO,CAACqC,KAAK,CAAC,oBAAoB,CAAC;IACrC,CAAC,SAAS;MACRnB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMiC,eAAe,GAAIF,GAAG,IAAK;IAC/B;IACA,MAAMG,gBAAgB,GAAG5C,mBAAmB,CAACwC,MAAM,CAACK,GAAG,IAAIA,GAAG,CAAC5C,KAAK,KAAKwC,GAAG,CAACxB,QAAQ,CAAC;IAEtFvB,KAAK,CAACoD,OAAO,CAAC;MACZC,KAAK,EAAE,wBAAwB;MAC/BC,IAAI,EAAE,IAAI;MACVC,OAAO,eACLlD,OAAA,CAACJ,MAAM;QACLuD,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAO,CAAE;QACzBC,WAAW,EAAC,iBAAiB;QAC7BC,OAAO,EAAET,gBAAiB;QAC1BU,QAAQ,EAAGrD,KAAK,IAAK;UACnBsD,kBAAkB,CAACd,GAAG,EAAExC,KAAK,CAAC;UAC9BP,KAAK,CAAC8D,UAAU,CAAC,CAAC,CAAC,CAAC;QACtB;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACF;MACDC,aAAa,EAAE;QAAEX,KAAK,EAAE;UAAEY,OAAO,EAAE;QAAO;MAAE,CAAC;MAC7CC,gBAAgB,EAAE;IACpB,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMR,kBAAkB,GAAG,MAAAA,CAAOd,GAAG,EAAEuB,UAAU,KAAK;IACpD,IAAI;MACFtD,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMuD,cAAc,GAAGzC,OAAO,CAACC,GAAG,CAACyC,yBAAyB,IAAI,uBAAuB;;MAEvF;MACA,MAAMC,YAAY,GAAG,MAAMvE,KAAK,CAACsC,IAAI,CAAC,GAAG+B,cAAc,YAAY,EAAE;QACnEG,IAAI,EAAE3B,GAAG,CAAC1B,QAAQ;QAClBsD,IAAI,EAAEL,UAAU;QAChBM,GAAG,EAAE7B,GAAG,CAACxB;MACX,CAAC,CAAC;MACF;MACA,MAAMsD,UAAU,GAAG,MAAM3E,KAAK,CAACsC,IAAI,CAAC,GAAG+B,cAAc,YAAY,EAAE;QACjEG,IAAI,EAAE3B,GAAG,CAACzB,MAAM;QAChBqD,IAAI,EAAEL,UAAU;QAChBM,GAAG,EAAE7B,GAAG,CAACxB;MACX,CAAC,CAAC;;MAEF;MACAT,iBAAiB,CAACgE,IAAI,KAAK;QACzB,GAAGA,IAAI;QACP,CAAC/B,GAAG,CAACC,GAAG,GAAG;UACT,GAAG8B,IAAI,CAAC/B,GAAG,CAACC,GAAG,CAAC;UAChB,CAACsB,UAAU,GAAG;YACZjD,QAAQ,EAAEoD,YAAY,CAACxC,IAAI,CAAC8C,WAAW;YACvCzD,MAAM,EAAEuD,UAAU,CAAC5C,IAAI,CAAC8C;UAC1B;QACF;MACF,CAAC,CAAC,CAAC;;MAEH;MACA,MAAMC,oBAAoB,GAAGjC,GAAG,CAACkC,YAAY,IAAI,CAAC,CAAC;MACnD,MAAMC,mBAAmB,GAAG;QAC1B,GAAGF,oBAAoB;QACvB,CAACV,UAAU,GAAG;UACZjD,QAAQ,EAAEoD,YAAY,CAACxC,IAAI,CAAC8C,WAAW;UACvCzD,MAAM,EAAEuD,UAAU,CAAC5C,IAAI,CAAC8C;QAC1B;MACF,CAAC;;MAED;MACA,MAAMI,iBAAiB,GAAG;QACxB9D,QAAQ,EAAE0B,GAAG,CAAC1B,QAAQ;QACtBC,MAAM,EAAEyB,GAAG,CAACzB,MAAM;QAClBC,QAAQ,EAAEwB,GAAG,CAACxB,QAAQ;QACtB0D,YAAY,EAAEC;MAChB,CAAC;;MAED;MACA,MAAME,cAAc,GAAG,MAAMlF,KAAK,CAACmF,GAAG,CAAC,GAAGvD,OAAO,CAACC,GAAG,CAACC,iBAAiB,SAASe,GAAG,CAACC,GAAG,EAAE,EAAEmC,iBAAiB,CAAC;;MAE7G;MACAvE,OAAO,CAAC8B,QAAQ,IAAIA,QAAQ,CAAC4C,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACvC,GAAG,KAAKD,GAAG,CAACC,GAAG,GAAGoC,cAAc,CAACnD,IAAI,GAAGsD,CAAC,CAAC,CAAC;MACnFzF,OAAO,CAAC2C,OAAO,CAAC,mBAAmB6B,UAAU,CAACkB,WAAW,CAAC,CAAC,eAAe,CAAC;IAC7E,CAAC,CAAC,OAAOrD,KAAK,EAAE;MACdrC,OAAO,CAACqC,KAAK,CAAC,uBAAuB,CAAC;IACxC,CAAC,SAAS;MACRnB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMyE,qBAAqB,GAAG,MAAAA,CAAOC,WAAW,EAAEX,WAAW,KAAK;IAChE,IAAI;MACF;MACA,MAAM,CAACT,UAAU,CAAC,GAAGqB,MAAM,CAACC,IAAI,CAACb,WAAW,CAAC,CAACjC,MAAM,CAAC+C,CAAC,IAAIA,CAAC,KAAK,KAAK,CAAC;;MAEtE;MACA,IAAI,CAACrE,SAAS,CAACsE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACtE,IAAI,KAAK6C,UAAU,CAAC,EAAE;QAC/C,MAAM,IAAI0B,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MAEA,MAAMpE,QAAQ,GAAG,MAAM1B,KAAK,CAACsC,IAAI,CAAC,GAAGV,OAAO,CAACC,GAAG,CAACC,iBAAiB,OAAO,EAAE;QACzEX,QAAQ,EAAE0D,WAAW,CAACT,UAAU,CAAC,CAACjD,QAAQ;QAC1CC,MAAM,EAAEyD,WAAW,CAACT,UAAU,CAAC,CAAChD,MAAM;QACtCC,QAAQ,EAAE+C;MACZ,CAAC,CAAC;MACFxE,OAAO,CAAC2C,OAAO,CAAC,oCAAoC,CAAC;MACrD7B,OAAO,CAACkE,IAAI,IAAI,CAAClD,QAAQ,CAACK,IAAI,EAAE,GAAG6C,IAAI,CAAC,CAAC;IAC3C,CAAC,CAAC,OAAO3C,KAAK,EAAE;MACdrC,OAAO,CAACqC,KAAK,CAAC,6BAA6B,CAAC;IAC9C;EACF,CAAC;EAED,oBACE9B,OAAA;IAAK4F,SAAS,EAAC,WAAW;IAAAC,QAAA,eACxB7F,OAAA,CAACR,IAAI;MACHwD,KAAK,EAAC,aAAa;MACnB8C,KAAK,eAAE9F,OAAA,CAACF,gBAAgB;QAACI,KAAK,EAAEU,YAAa;QAAC2C,QAAQ,EAAE1C,eAAgB;QAACsC,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAI;MAAE;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAE;MAAAgC,QAAA,gBAEnG7F,OAAA;QAAM+F,QAAQ,EAAEhE,YAAa;QAAA8D,QAAA,gBAC3B7F,OAAA,CAACN,KAAK;UACJ2D,WAAW,EAAC,gBAAgB;UAC5BnD,KAAK,EAAEY,QAAQ,CAACE,QAAS;UACzBuC,QAAQ,EAAGvB,CAAC,IAAKjB,WAAW,CAAC;YAAE,GAAGD,QAAQ;YAAEE,QAAQ,EAAEgB,CAAC,CAACgE,MAAM,CAAC9F;UAAM,CAAC,CAAE;UACxE0F,SAAS,EAAC,aAAa;UACvBzC,KAAK,EAAE;YAAE8C,YAAY,EAAE;UAAG;QAAE;UAAAvC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CAAC,eACF7D,OAAA,CAACN,KAAK,CAACwG,QAAQ;UACb7C,WAAW,EAAC,cAAc;UAC1BnD,KAAK,EAAEY,QAAQ,CAACG,MAAO;UACvBsC,QAAQ,EAAGvB,CAAC,IAAKjB,WAAW,CAAC;YAAE,GAAGD,QAAQ;YAAEG,MAAM,EAAEe,CAAC,CAACgE,MAAM,CAAC9F;UAAM,CAAC,CAAE;UACtE0F,SAAS,EAAC,aAAa;UACvBO,IAAI,EAAE,CAAE;UACRhD,KAAK,EAAE;YAAE8C,YAAY,EAAE;UAAG;QAAE;UAAAvC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CAAC,eACF7D,OAAA,CAACT,MAAM;UAAC6G,IAAI,EAAC,SAAS;UAACC,QAAQ,EAAC,QAAQ;UAAC3F,OAAO,EAAEA,OAAQ;UAAAmF,QAAA,EAAC;QAAM;UAAAnC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtE,CAAC,eAEP7D,OAAA;QAAK4F,SAAS,EAAC,UAAU;QAACzC,KAAK,EAAE;UAAEmD,SAAS,EAAE;QAAG,CAAE;QAAAT,QAAA,EAChDvF,IAAI,CAAC2E,GAAG,CAACvC,GAAG;UAAA,IAAA6D,qBAAA,EAAAC,sBAAA;UAAA,oBACXxG,OAAA,CAACR,IAAI;YAAe2D,KAAK,EAAE;cAAEmD,SAAS,EAAE;YAAG,CAAE;YAAAT,QAAA,gBAC3C7F,OAAA;cAAK4F,SAAS,EAAC,aAAa;cAAAC,QAAA,gBAC1B7F,OAAA;gBAAA6F,QAAA,EAAK,EAAAU,qBAAA,GAAA/F,cAAc,CAACkC,GAAG,CAACC,GAAG,CAAC,cAAA4D,qBAAA,uBAAvBA,qBAAA,CAAyBvF,QAAQ,KAAI0B,GAAG,CAAC1B;cAAQ;gBAAA0C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC5D7D,OAAA;gBAAK4F,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAEnD,GAAG,CAACxB,QAAQ,CAACiE,WAAW,CAAC;cAAC;gBAAAzB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC7D,CAAC,eACN7D,OAAA;cAAK4F,SAAS,EAAC,gBAAgB;cAAAC,QAAA,GAC5BrF,cAAc,CAACkC,GAAG,CAACC,GAAG,CAAC,iBACtB3C,OAAA;gBAAK4F,SAAS,EAAC,qBAAqB;gBAAAC,QAAA,gBAClC7F,OAAA,CAACT,MAAM;kBACL6G,IAAI,EAAC,SAAS;kBACdK,IAAI,EAAC,OAAO;kBACZC,OAAO,EAAEA,CAAA,KAAMtB,qBAAqB,CAAC1C,GAAG,EAAElC,cAAc,CAACkC,GAAG,CAACC,GAAG,CAAC,CAAE;kBAAAkD,QAAA,EACpE;gBAED;kBAAAnC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACT7D,OAAA;kBAAM4F,SAAS,EAAC,sBAAsB;kBAAAC,QAAA,GAAC,GACpC,EAACP,MAAM,CAACC,IAAI,CAAC/E,cAAc,CAACkC,GAAG,CAACC,GAAG,CAAC,CAAC,CAACgE,IAAI,CAACnB,CAAC,IAAIA,CAAC,KAAK,KAAK,CAAC,EAAC,GAChE;gBAAA;kBAAA9B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACJ,CACN,EACA,EAAA2C,sBAAA,GAAAhG,cAAc,CAACkC,GAAG,CAACC,GAAG,CAAC,cAAA6D,sBAAA,uBAAvBA,sBAAA,CAAyBvF,MAAM,KAAIyB,GAAG,CAACzB,MAAM;YAAA;cAAAyC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3C,CAAC,eACN7D,OAAA;cAAKmD,KAAK,EAAE;gBAAEmD,SAAS,EAAE;cAAE,CAAE;cAAAT,QAAA,gBAC3B7F,OAAA,CAACT,MAAM;gBAAC6G,IAAI,EAAC,MAAM;gBAACM,OAAO,EAAEA,CAAA,KAAM9D,eAAe,CAACF,GAAG,CAAE;gBAAAmD,QAAA,EAAC;cAEzD;gBAAAnC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACT7D,OAAA,CAACT,MAAM;gBAAC6G,IAAI,EAAC,MAAM;gBAACQ,MAAM;gBAACF,OAAO,EAAEA,CAAA,KAAMpE,YAAY,CAACI,GAAG,CAACC,GAAG,CAAE;gBAAAkD,QAAA,EAAC;cAEjE;gBAAAnC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA,GA7BGnB,GAAG,CAACC,GAAG;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OA8BZ,CAAC;QAAA,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACxD,EAAA,CAtPID,SAAS;AAAAyG,EAAA,GAATzG,SAAS;AAuPf,eAAeA,SAAS;AAAC,IAAAyG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}