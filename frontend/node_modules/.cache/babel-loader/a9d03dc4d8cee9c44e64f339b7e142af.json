{"ast":null,"code":"var LinkTooltip,\n  Quill,\n  Tooltip,\n  dom,\n  _,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function (child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n    function ctor() {\n      this.constructor = child;\n    }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\nQuill = require('../quill');\nTooltip = require('./tooltip');\n_ = Quill.require('lodash');\ndom = Quill.require('dom');\nLinkTooltip = function (_super) {\n  __extends(LinkTooltip, _super);\n  LinkTooltip.DEFAULTS = {\n    maxLength: 50,\n    styles: {\n      '.link-tooltip-container': {\n        'padding': '5px 10px'\n      },\n      '.link-tooltip-container input.input': {\n        'width': '170px'\n      },\n      '.link-tooltip-container input.input, .link-tooltip-container a.done, .link-tooltip-container.editing a.url, .link-tooltip-container.editing a.change': {\n        'display': 'none'\n      },\n      '.link-tooltip-container.editing input.input, .link-tooltip-container.editing a.done': {\n        'display': 'inline-block'\n      }\n    },\n    template: '<span class=\"title\">Visit URL:&nbsp;</span> <a href=\"#\" class=\"url\" target=\"_blank\" href=\"about:blank\"></a> <input class=\"input\" type=\"text\"> <span>&nbsp;&#45;&nbsp;</span> <a href=\"javascript:;\" class=\"change\">Change</a> <a href=\"javascript:;\" class=\"done\">Done</a>'\n  };\n  function LinkTooltip(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    this.options.styles = _.defaults(this.options.styles, Tooltip.DEFAULTS.styles);\n    this.options = _.defaults(this.options, Tooltip.DEFAULTS);\n    LinkTooltip.__super__.constructor.call(this, this.quill, this.options);\n    dom(this.container).addClass('link-tooltip-container');\n    this.textbox = this.container.querySelector('.input');\n    this.link = this.container.querySelector('.url');\n    this.initListeners();\n  }\n  LinkTooltip.prototype.initListeners = function () {\n    this.quill.on(this.quill.constructor.events.SELECTION_CHANGE, function (_this) {\n      return function (range) {\n        var anchor;\n        if (!(range != null && range.isCollapsed())) {\n          return;\n        }\n        anchor = _this._findAnchor(range);\n        if (anchor) {\n          _this.setMode(anchor.href, false);\n          return _this.show(anchor);\n        } else {\n          _this.range = null;\n          return _this.hide();\n        }\n      };\n    }(this));\n    dom(this.container.querySelector('.done')).on('click', _.bind(this.saveLink, this));\n    dom(this.container.querySelector('.change')).on('click', function (_this) {\n      return function () {\n        return _this.setMode(_this.link.href, true);\n      };\n    }(this));\n    this.initTextbox(this.textbox, this.saveLink, this.hide);\n    return this.quill.onModuleLoad('toolbar', function (_this) {\n      return function (toolbar) {\n        return toolbar.initFormat('link', _.bind(_this._onToolbar, _this));\n      };\n    }(this));\n  };\n  LinkTooltip.prototype.saveLink = function () {\n    var anchor, url;\n    url = this._normalizeURL(this.textbox.value);\n    if (this.range != null) {\n      if (this.range.isCollapsed()) {\n        anchor = this._findAnchor(this.range);\n        if (anchor != null) {\n          anchor.href = url;\n        }\n      } else {\n        this.quill.formatText(this.range, 'link', url, 'user');\n      }\n    }\n    return this.setMode(url, false);\n  };\n  LinkTooltip.prototype.setMode = function (url, edit) {\n    var text;\n    if (edit == null) {\n      edit = false;\n    }\n    if (edit) {\n      this.textbox.value = url;\n      _.defer(function (_this) {\n        return function () {\n          _this.textbox.focus();\n          return _this.textbox.setSelectionRange(url.length, url.length);\n        };\n      }(this));\n    } else {\n      this.link.href = url;\n      text = url.length > this.options.maxLength ? url.slice(0, this.options.maxLength) + '...' : url;\n      dom(this.link).text(text);\n    }\n    return dom(this.container).toggleClass('editing', edit);\n  };\n  LinkTooltip.prototype._findAnchor = function (range) {\n    var leaf, node, offset, _ref;\n    _ref = this.quill.editor.doc.findLeafAt(range.start, true), leaf = _ref[0], offset = _ref[1];\n    if (leaf != null) {\n      node = leaf.node;\n    }\n    while (node != null) {\n      if (node.tagName === 'A') {\n        return node;\n      }\n      node = node.parentNode;\n    }\n    return null;\n  };\n  LinkTooltip.prototype._onToolbar = function (range, value) {\n    var nativeRange;\n    if (!(range && !range.isCollapsed())) {\n      return;\n    }\n    if (value) {\n      this.setMode(this._suggestURL(range), true);\n      nativeRange = this.quill.editor.selection._getNativeRange();\n      return this.show(nativeRange);\n    } else {\n      return this.quill.formatText(range, 'link', false, 'user');\n    }\n  };\n  LinkTooltip.prototype._normalizeURL = function (url) {\n    if (!/^(https?:\\/\\/|mailto:)/.test(url)) {\n      url = 'http://' + url;\n    }\n    return url;\n  };\n  LinkTooltip.prototype._suggestURL = function (range) {\n    var text;\n    text = this.quill.getText(range);\n    return this._normalizeURL(text);\n  };\n  return LinkTooltip;\n}(Tooltip);\nQuill.registerModule('link-tooltip', LinkTooltip);\nmodule.exports = LinkTooltip;","map":null,"metadata":{},"sourceType":"script"}