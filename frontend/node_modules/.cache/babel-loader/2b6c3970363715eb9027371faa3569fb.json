{"ast":null,"code":"var EventEmitter2,\n  MultiCursor,\n  Quill,\n  dom,\n  _,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function (child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n    function ctor() {\n      this.constructor = child;\n    }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\nQuill = require('../quill');\nEventEmitter2 = require('eventemitter2').EventEmitter2;\n_ = Quill.require('lodash');\ndom = Quill.require('dom');\nMultiCursor = function (_super) {\n  __extends(MultiCursor, _super);\n  MultiCursor.DEFAULTS = {\n    template: '<span class=\"cursor-flag\"> <span class=\"cursor-name\"></span> </span> <span class=\"cursor-caret\"></span>',\n    timeout: 2500\n  };\n  MultiCursor.events = {\n    CURSOR_ADDED: 'cursor-addded',\n    CURSOR_MOVED: 'cursor-moved',\n    CURSOR_REMOVED: 'cursor-removed'\n  };\n  function MultiCursor(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    this.cursors = {};\n    this.container = this.quill.addContainer('cursor-container', true);\n    this.quill.addStyles({\n      '.cursor-container': {\n        'position': 'absolute',\n        'left': '0',\n        'top': '0',\n        'z-index': '1000'\n      },\n      '.cursor': {\n        'margin-left': '-1px',\n        'position': 'absolute'\n      },\n      '.cursor-flag': {\n        'bottom': '100%',\n        'position': 'absolute',\n        'white-space': 'nowrap'\n      },\n      '.cursor-name': {\n        'display': 'inline-block',\n        'color': 'white',\n        'padding': '2px 8px'\n      },\n      '.cursor-caret': {\n        'height': '100%',\n        'position': 'absolute',\n        'width': '2px'\n      },\n      '.cursor.hidden .cursor-flag': {\n        'display': 'none'\n      },\n      '.cursor.top > .cursor-flag': {\n        'bottom': 'auto',\n        'top': '100%'\n      },\n      '.cursor.right > .cursor-flag': {\n        'right': '-2px'\n      }\n    });\n    this.quill.on(this.quill.constructor.events.TEXT_CHANGE, _.bind(this._applyDelta, this));\n  }\n  MultiCursor.prototype.clearCursors = function () {\n    _.each(_.keys(this.cursors), _.bind(this.removeCursor, this));\n    return this.cursors = {};\n  };\n  MultiCursor.prototype.moveCursor = function (userId, index) {\n    var cursor;\n    cursor = this.cursors[userId];\n    cursor.index = index;\n    dom(cursor.elem).removeClass('hidden');\n    clearTimeout(cursor.timer);\n    cursor.timer = setTimeout(function (_this) {\n      return function () {\n        dom(cursor.elem).addClass('hidden');\n        return cursor.timer = null;\n      };\n    }(this), this.options.timeout);\n    this._updateCursor(cursor);\n    return cursor;\n  };\n  MultiCursor.prototype.removeCursor = function (userId) {\n    var cursor;\n    cursor = this.cursors[userId];\n    this.emit(MultiCursor.events.CURSOR_REMOVED, cursor);\n    if (cursor != null) {\n      cursor.elem.parentNode.removeChild(cursor.elem);\n    }\n    return delete this.cursors[userId];\n  };\n  MultiCursor.prototype.setCursor = function (userId, index, name, color) {\n    var cursor;\n    if (this.cursors[userId] == null) {\n      this.cursors[userId] = cursor = {\n        userId: userId,\n        index: index,\n        color: color,\n        elem: this._buildCursor(name, color)\n      };\n      this.emit(MultiCursor.events.CURSOR_ADDED, cursor);\n    }\n    _.defer(function (_this) {\n      return function () {\n        return _this.moveCursor(userId, index);\n      };\n    }(this));\n    return this.cursors[userId];\n  };\n  MultiCursor.prototype.shiftCursors = function (index, length, authorId) {\n    if (authorId == null) {\n      authorId = null;\n    }\n    return _.each(this.cursors, function (_this) {\n      return function (cursor, id) {\n        if (!(cursor && (cursor.index > index || cursor.userId === authorId))) {\n          return;\n        }\n        return cursor.index += Math.max(length, index - cursor.index);\n      };\n    }(this));\n  };\n  MultiCursor.prototype.update = function () {\n    return _.each(this.cursors, function (_this) {\n      return function (cursor, id) {\n        if (cursor == null) {\n          return;\n        }\n        _this._updateCursor(cursor);\n        return true;\n      };\n    }(this));\n  };\n  MultiCursor.prototype._applyDelta = function (delta) {\n    var index;\n    index = 0;\n    _.each(delta.ops, function (_this) {\n      return function (op) {\n        var length, _ref;\n        length = 0;\n        if (op.insert != null) {\n          length = op.insert.length || 1;\n          _this.shiftCursors(index, length, (_ref = op.attributes) != null ? _ref['author'] : void 0);\n        } else if (op[\"delete\"] != null) {\n          _this.shiftCursors(index, -1 * op[\"delete\"], null);\n        } else if (op.retain != null) {\n          _this.shiftCursors(index, 0, null);\n          length = op.retain;\n        }\n        return index += length;\n      };\n    }(this));\n    return this.update();\n  };\n  MultiCursor.prototype._buildCursor = function (name, color) {\n    var cursor, cursorCaret, cursorFlag, cursorName;\n    cursor = this.container.ownerDocument.createElement('span');\n    dom(cursor).addClass('cursor');\n    cursor.innerHTML = this.options.template;\n    cursorFlag = cursor.querySelector('.cursor-flag');\n    cursorName = cursor.querySelector('.cursor-name');\n    dom(cursorName).text(name);\n    cursorCaret = cursor.querySelector('.cursor-caret');\n    cursorCaret.style.backgroundColor = cursorName.style.backgroundColor = color;\n    this.container.appendChild(cursor);\n    return cursor;\n  };\n  MultiCursor.prototype._moveCursor = function (cursor, reference, side) {\n    var bounds, flag, win;\n    if (side == null) {\n      side = 'left';\n    }\n    win = dom(reference).window();\n    bounds = reference.getBoundingClientRect();\n    cursor.elem.style.top = bounds.top + win.pageYOffset + 'px';\n    cursor.elem.style.left = bounds[side] + 'px';\n    cursor.elem.style.height = bounds.height + 'px';\n    flag = cursor.elem.querySelector('.cursor-flag');\n    dom(cursor.elem).toggleClass('top', parseInt(cursor.elem.style.top) <= flag.offsetHeight).toggleClass('left', parseInt(cursor.elem.style.left) <= flag.offsetWidth).toggleClass('right', this.quill.root.offsetWidth - parseInt(cursor.elem.style.left) <= flag.offsetWidth);\n    return this.emit(MultiCursor.events.CURSOR_MOVED, cursor);\n  };\n  MultiCursor.prototype._updateCursor = function (cursor) {\n    var didSplit, guide, leaf, leftNode, offset, rightNode, _ref, _ref1;\n    this.quill.editor.checkUpdate();\n    _ref = this.quill.editor.doc.findLeafAt(cursor.index, true), leaf = _ref[0], offset = _ref[1];\n    guide = this.container.ownerDocument.createElement('span');\n    if (leaf != null) {\n      _ref1 = dom(leaf.node).split(offset), leftNode = _ref1[0], rightNode = _ref1[1], didSplit = _ref1[2];\n      dom(guide).text(dom.ZERO_WIDTH_NOBREAK_SPACE);\n      leaf.node.parentNode.insertBefore(guide, rightNode);\n    } else {\n      dom(guide).text(dom.NOBREAK_SPACE);\n      this.quill.root.appendChild(guide);\n    }\n    this._moveCursor(cursor, guide);\n    dom(guide).remove();\n    if (didSplit) {\n      dom(leaf.node.parentNode).normalize();\n    }\n    return this.quill.editor.selection.update(Quill.sources.SILENT);\n  };\n  return MultiCursor;\n}(EventEmitter2);\nQuill.registerModule('multi-cursor', MultiCursor);\nmodule.exports = MultiCursor;","map":null,"metadata":{},"sourceType":"script"}