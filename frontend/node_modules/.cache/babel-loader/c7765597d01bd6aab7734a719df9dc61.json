{"ast":null,"code":"var Normalizer, Picker, dom, _;\n_ = require('lodash');\ndom = require('./dom');\nNormalizer = require('./normalizer');\nPicker = function () {\n  Picker.TEMPLATE = '<span class=\"ql-picker-label\"></span><span class=\"ql-picker-options\"></span>';\n  function Picker(select) {\n    this.select = select;\n    this.container = this.select.ownerDocument.createElement('span');\n    this.buildPicker();\n    dom(this.container).addClass('ql-picker');\n    this.select.style.display = 'none';\n    this.select.parentNode.insertBefore(this.container, this.select);\n    dom(this.select.ownerDocument).on('click', function (_this) {\n      return function () {\n        _this.close();\n        return true;\n      };\n    }(this));\n    dom(this.label).on('click', function (_this) {\n      return function () {\n        _.defer(function () {\n          return dom(_this.container).toggleClass('ql-expanded');\n        });\n        return false;\n      };\n    }(this));\n    dom(this.select).on('change', function (_this) {\n      return function () {\n        var item, option;\n        if (_this.select.selectedIndex > -1) {\n          item = _this.container.querySelectorAll('.ql-picker-item')[_this.select.selectedIndex];\n          option = _this.select.options[_this.select.selectedIndex];\n        }\n        _this.selectItem(item, false);\n        return dom(_this.label).toggleClass('ql-active', option !== dom(_this.select)[\"default\"]());\n      };\n    }(this));\n  }\n  Picker.prototype.buildItem = function (picker, option, index) {\n    var item;\n    item = this.select.ownerDocument.createElement('span');\n    item.setAttribute('data-value', option.getAttribute('value'));\n    dom(item).addClass('ql-picker-item').text(dom(option).text()).on('click', function (_this) {\n      return function () {\n        _this.selectItem(item, true);\n        return _this.close();\n      };\n    }(this));\n    if (this.select.selectedIndex === index) {\n      this.selectItem(item, false);\n    }\n    return item;\n  };\n  Picker.prototype.buildPicker = function () {\n    var picker;\n    _.each(dom(this.select).attributes(), function (_this) {\n      return function (value, name) {\n        return _this.container.setAttribute(name, value);\n      };\n    }(this));\n    this.container.innerHTML = Normalizer.stripWhitespace(Picker.TEMPLATE);\n    this.label = this.container.querySelector('.ql-picker-label');\n    picker = this.container.querySelector('.ql-picker-options');\n    return _.each(this.select.options, function (_this) {\n      return function (option, i) {\n        var item;\n        item = _this.buildItem(picker, option, i);\n        return picker.appendChild(item);\n      };\n    }(this));\n  };\n  Picker.prototype.close = function () {\n    return dom(this.container).removeClass('ql-expanded');\n  };\n  Picker.prototype.selectItem = function (item, trigger) {\n    var selected, value;\n    selected = this.container.querySelector('.ql-selected');\n    if (selected != null) {\n      dom(selected).removeClass('ql-selected');\n    }\n    if (item != null) {\n      value = item.getAttribute('data-value');\n      dom(item).addClass('ql-selected');\n      dom(this.label).text(dom(item).text());\n      dom(this.select).option(value, trigger);\n      return this.label.setAttribute('data-value', value);\n    } else {\n      this.label.innerHTML = '&nbsp;';\n      return this.label.removeAttribute('data-value');\n    }\n  };\n  return Picker;\n}();\nmodule.exports = Picker;","map":null,"metadata":{},"sourceType":"script"}