{"ast":null,"code":"var Delta, Document, Format, Line, LinkedList, Normalizer, dom, _;\n_ = require('lodash');\nDelta = require('rich-text').Delta;\ndom = require('../lib/dom');\nFormat = require('./format');\nLine = require('./line');\nLinkedList = require('../lib/linked-list');\nNormalizer = require('../lib/normalizer');\nDocument = function () {\n  function Document(root, options) {\n    this.root = root;\n    if (options == null) {\n      options = {};\n    }\n    this.formats = {};\n    _.each(options.formats, _.bind(this.addFormat, this));\n    this.setHTML(this.root.innerHTML);\n  }\n  Document.prototype.addFormat = function (name, config) {\n    if (!_.isObject(config)) {\n      config = Format.FORMATS[name];\n    }\n    if (this.formats[name] != null) {\n      console.warn('Overwriting format', name, this.formats[name]);\n    }\n    return this.formats[name] = new Format(this.root.ownerDocument, config);\n  };\n  Document.prototype.appendLine = function (lineNode) {\n    return this.insertLineBefore(lineNode, null);\n  };\n  Document.prototype.findLeafAt = function (index, inclusive) {\n    var line, offset, _ref;\n    _ref = this.findLineAt(index), line = _ref[0], offset = _ref[1];\n    if (line != null) {\n      return line.findLeafAt(offset, inclusive);\n    } else {\n      return [null, offset];\n    }\n  };\n  Document.prototype.findLine = function (node) {\n    var line;\n    while (node != null && dom.BLOCK_TAGS[node.tagName] == null) {\n      node = node.parentNode;\n    }\n    line = node != null ? this.lineMap[node.id] : null;\n    if ((line != null ? line.node : void 0) === node) {\n      return line;\n    } else {\n      return null;\n    }\n  };\n  Document.prototype.findLineAt = function (index) {\n    var curLine, length;\n    if (!(this.lines.length > 0)) {\n      return [null, index];\n    }\n    length = this.toDelta().length();\n    if (index === length) {\n      return [this.lines.last, this.lines.last.length];\n    }\n    if (index > length) {\n      return [null, index - length];\n    }\n    curLine = this.lines.first;\n    while (curLine != null) {\n      if (index < curLine.length) {\n        return [curLine, index];\n      }\n      index -= curLine.length;\n      curLine = curLine.next;\n    }\n    return [null, index];\n  };\n  Document.prototype.insertLineBefore = function (newLineNode, refLine) {\n    var line;\n    line = new Line(this, newLineNode);\n    if (refLine != null) {\n      if (!dom(newLineNode.parentNode).isElement()) {\n        this.root.insertBefore(newLineNode, refLine.node);\n      }\n      this.lines.insertAfter(refLine.prev, line);\n    } else {\n      if (!dom(newLineNode.parentNode).isElement()) {\n        this.root.appendChild(newLineNode);\n      }\n      this.lines.append(line);\n    }\n    this.lineMap[line.id] = line;\n    return line;\n  };\n  Document.prototype.mergeLines = function (line, lineToMerge) {\n    if (lineToMerge.length > 1) {\n      if (line.length === 1) {\n        dom(line.leaves.last.node).remove();\n      }\n      _.each(dom(lineToMerge.node).childNodes(), function (child) {\n        if (child.tagName !== dom.DEFAULT_BREAK_TAG) {\n          return line.node.appendChild(child);\n        }\n      });\n    }\n    this.removeLine(lineToMerge);\n    return line.rebuild();\n  };\n  Document.prototype.optimizeLines = function () {\n    return _.each(this.lines.toArray(), function (line, i) {\n      line.optimize();\n      return true;\n    });\n  };\n  Document.prototype.rebuild = function () {\n    var lineNode, lines, _results;\n    lines = this.lines.toArray();\n    lineNode = this.root.firstChild;\n    if (lineNode != null && dom.LIST_TAGS[lineNode.tagName] != null) {\n      lineNode = lineNode.firstChild;\n    }\n    _.each(lines, function (_this) {\n      return function (line, index) {\n        var newLine, _ref;\n        while (line.node !== lineNode) {\n          if (line.node.parentNode === _this.root || ((_ref = line.node.parentNode) != null ? _ref.parentNode : void 0) === _this.root) {\n            lineNode = Normalizer.normalizeLine(lineNode);\n            newLine = _this.insertLineBefore(lineNode, line);\n            lineNode = dom(lineNode).nextLineNode(_this.root);\n          } else {\n            return _this.removeLine(line);\n          }\n        }\n        if (line.outerHTML !== lineNode.outerHTML) {\n          line.node = Normalizer.normalizeLine(line.node);\n          line.rebuild();\n        }\n        return lineNode = dom(lineNode).nextLineNode(_this.root);\n      };\n    }(this));\n    _results = [];\n    while (lineNode != null) {\n      lineNode = Normalizer.normalizeLine(lineNode);\n      this.appendLine(lineNode);\n      _results.push(lineNode = dom(lineNode).nextLineNode(this.root));\n    }\n    return _results;\n  };\n  Document.prototype.removeLine = function (line) {\n    if (line.node.parentNode != null) {\n      if (dom.LIST_TAGS[line.node.parentNode.tagName] && line.node.parentNode.childNodes.length === 1) {\n        dom(line.node.parentNode).remove();\n      } else {\n        dom(line.node).remove();\n      }\n    }\n    delete this.lineMap[line.id];\n    return this.lines.remove(line);\n  };\n  Document.prototype.setHTML = function (html) {\n    html = Normalizer.stripComments(html);\n    html = Normalizer.stripWhitespace(html);\n    this.root.innerHTML = html;\n    this.lines = new LinkedList();\n    this.lineMap = {};\n    return this.rebuild();\n  };\n  Document.prototype.splitLine = function (line, offset) {\n    var lineNode1, lineNode2, newLine, _ref;\n    offset = Math.min(offset, line.length - 1);\n    _ref = dom(line.node).split(offset, true), lineNode1 = _ref[0], lineNode2 = _ref[1];\n    line.node = lineNode1;\n    line.rebuild();\n    newLine = this.insertLineBefore(lineNode2, line.next);\n    newLine.formats = _.clone(line.formats);\n    newLine.resetContent();\n    return newLine;\n  };\n  Document.prototype.toDelta = function () {\n    var delta, lines;\n    lines = this.lines.toArray();\n    delta = new Delta();\n    lines.forEach(function (line) {\n      return line.delta.ops.forEach(function (op) {\n        return delta.push(op);\n      });\n    });\n    return delta;\n  };\n  return Document;\n}();\nmodule.exports = Document;","map":null,"metadata":{},"sourceType":"script"}