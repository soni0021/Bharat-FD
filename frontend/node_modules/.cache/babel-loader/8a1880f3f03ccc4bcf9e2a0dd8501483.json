{"ast":null,"code":"var Delta,\n  Editor,\n  EventEmitter2,\n  Format,\n  Quill,\n  Range,\n  dom,\n  pkg,\n  _,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function (child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n    function ctor() {\n      this.constructor = child;\n    }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  },\n  __slice = [].slice;\n_ = require('lodash');\npkg = require('../package.json');\nDelta = require('rich-text').Delta;\nEventEmitter2 = require('eventemitter2').EventEmitter2;\ndom = require('./lib/dom');\nEditor = require('./core/editor');\nFormat = require('./core/format');\nRange = require('./lib/range');\nQuill = function (_super) {\n  __extends(Quill, _super);\n  Quill.version = pkg.version;\n  Quill.editors = [];\n  Quill.modules = [];\n  Quill.themes = [];\n  Quill.DEFAULTS = {\n    formats: ['align', 'bold', 'italic', 'strike', 'underline', 'color', 'background', 'font', 'size', 'link', 'image', 'bullet', 'list'],\n    modules: {\n      'keyboard': true,\n      'paste-manager': true,\n      'undo-manager': true\n    },\n    pollInterval: 100,\n    readOnly: false,\n    theme: 'default'\n  };\n  Quill.events = {\n    MODULE_INIT: 'module-init',\n    POST_EVENT: 'post-event',\n    PRE_EVENT: 'pre-event',\n    SELECTION_CHANGE: 'selection-change',\n    TEXT_CHANGE: 'text-change'\n  };\n  Quill.sources = Editor.sources;\n  Quill.registerModule = function (name, module) {\n    if (Quill.modules[name] != null) {\n      console.warn(\"Overwriting \" + name + \" module\");\n    }\n    return Quill.modules[name] = module;\n  };\n  Quill.registerTheme = function (name, theme) {\n    if (Quill.themes[name] != null) {\n      console.warn(\"Overwriting \" + name + \" theme\");\n    }\n    return Quill.themes[name] = theme;\n  };\n  Quill.require = function (name) {\n    switch (name) {\n      case 'lodash':\n        return _;\n      case 'delta':\n        return Delta;\n      case 'dom':\n        return dom;\n      default:\n        return null;\n    }\n  };\n  function Quill(container, options) {\n    var html, moduleOptions, themeClass;\n    if (options == null) {\n      options = {};\n    }\n    if (_.isString(container)) {\n      container = document.querySelector(container);\n    }\n    if (container == null) {\n      throw new Error('Invalid Quill container');\n    }\n    moduleOptions = _.defaults(options.modules || {}, Quill.DEFAULTS.modules);\n    html = container.innerHTML;\n    this.options = _.defaults(options, Quill.DEFAULTS);\n    this.options.modules = moduleOptions;\n    this.options.id = this.id = \"quill-\" + (Quill.editors.length + 1);\n    this.options.emitter = this;\n    this.modules = {};\n    this.editor = new Editor(container, this, this.options);\n    this.root = this.editor.doc.root;\n    Quill.editors.push(this);\n    this.setHTML(html, Quill.sources.SILENT);\n    themeClass = Quill.themes[this.options.theme];\n    if (themeClass == null) {\n      throw new Error(\"Cannot load \" + this.options.theme + \" theme. Are you sure you registered it?\");\n    }\n    this.theme = new themeClass(this, this.options);\n    _.each(this.options.modules, function (_this) {\n      return function (option, name) {\n        return _this.addModule(name, option);\n      };\n    }(this));\n  }\n  Quill.prototype.addContainer = function (className, before) {\n    if (before == null) {\n      before = false;\n    }\n    return this.editor.renderer.addContainer(className, before);\n  };\n  Quill.prototype.addFormat = function (name, format) {\n    return this.editor.doc.addFormat(name, format);\n  };\n  Quill.prototype.addModule = function (name, options) {\n    var moduleClass;\n    moduleClass = Quill.modules[name];\n    if (moduleClass == null) {\n      throw new Error(\"Cannot load \" + name + \" module. Are you sure you registered it?\");\n    }\n    if (!_.isObject(options)) {\n      options = {};\n    }\n    options = _.defaults(options, this.theme.constructor.OPTIONS[name] || {}, moduleClass.DEFAULTS || {});\n    this.modules[name] = new moduleClass(this, options);\n    this.emit(Quill.events.MODULE_INIT, name, this.modules[name]);\n    return this.modules[name];\n  };\n  Quill.prototype.addStyles = function (styles) {\n    return this.editor.renderer.addStyles(styles);\n  };\n  Quill.prototype.deleteText = function (start, end, source) {\n    var delta, formats, _ref;\n    if (source == null) {\n      source = Quill.sources.API;\n    }\n    _ref = this._buildParams(start, end, {}, source), start = _ref[0], end = _ref[1], formats = _ref[2], source = _ref[3];\n    if (!(end > start)) {\n      return;\n    }\n    delta = new Delta().retain(start)[\"delete\"](end - start);\n    return this.editor.applyDelta(delta, source);\n  };\n  Quill.prototype.emit = function () {\n    var args, eventName;\n    eventName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    Quill.__super__.emit.apply(this, [Quill.events.PRE_EVENT, eventName].concat(__slice.call(args)));\n    Quill.__super__.emit.apply(this, [eventName].concat(__slice.call(args)));\n    return Quill.__super__.emit.apply(this, [Quill.events.POST_EVENT, eventName].concat(__slice.call(args)));\n  };\n  Quill.prototype.focus = function () {\n    return this.editor.focus();\n  };\n  Quill.prototype.formatLine = function (start, end, name, value, source) {\n    var formats, line, offset, _ref, _ref1;\n    _ref = this._buildParams(start, end, name, value, source), start = _ref[0], end = _ref[1], formats = _ref[2], source = _ref[3];\n    _ref1 = this.editor.doc.findLineAt(end), line = _ref1[0], offset = _ref1[1];\n    if (line != null) {\n      end += line.length - offset;\n    }\n    return this.formatText(start, end, formats, source);\n  };\n  Quill.prototype.formatText = function (start, end, name, value, source) {\n    var delta, formats, _ref;\n    _ref = this._buildParams(start, end, name, value, source), start = _ref[0], end = _ref[1], formats = _ref[2], source = _ref[3];\n    formats = _.reduce(formats, function (_this) {\n      return function (formats, value, name) {\n        var format;\n        format = _this.editor.doc.formats[name];\n        if (!(value && value !== format.config[\"default\"])) {\n          formats[name] = null;\n        }\n        return formats;\n      };\n    }(this), formats);\n    delta = new Delta().retain(start).retain(end - start, formats);\n    return this.editor.applyDelta(delta, source);\n  };\n  Quill.prototype.getContents = function (start, end) {\n    if (start == null) {\n      start = 0;\n    }\n    if (end == null) {\n      end = null;\n    }\n    if (_.isObject(start)) {\n      end = start.end;\n      start = start.start;\n    }\n    return this.editor.getDelta().slice(start, end);\n  };\n  Quill.prototype.getHTML = function () {\n    return this.root.innerHTML;\n  };\n  Quill.prototype.getLength = function () {\n    return this.editor.getDelta().length();\n  };\n  Quill.prototype.getModule = function (name) {\n    return this.modules[name];\n  };\n  Quill.prototype.getSelection = function () {\n    this.editor.checkUpdate();\n    return this.editor.selection.getRange();\n  };\n  Quill.prototype.getText = function (start, end) {\n    if (start == null) {\n      start = 0;\n    }\n    if (end == null) {\n      end = null;\n    }\n    return _.map(this.getContents(start, end).ops, function (op) {\n      if (_.isString(op.insert)) {\n        return op.insert;\n      } else {\n        return '';\n      }\n    }).join('');\n  };\n  Quill.prototype.insertEmbed = function (index, type, url, source) {\n    return this.insertText(index, dom.EMBED_TEXT, type, url, source);\n  };\n  Quill.prototype.insertText = function (index, text, name, value, source) {\n    var delta, end, formats, _ref;\n    _ref = this._buildParams(index, 0, name, value, source), index = _ref[0], end = _ref[1], formats = _ref[2], source = _ref[3];\n    if (!(text.length > 0)) {\n      return;\n    }\n    delta = new Delta().retain(index).insert(text, formats);\n    return this.editor.applyDelta(delta, source);\n  };\n  Quill.prototype.onModuleLoad = function (name, callback) {\n    if (this.modules[name]) {\n      return callback(this.modules[name]);\n    }\n    return this.on(Quill.events.MODULE_INIT, function (moduleName, module) {\n      if (moduleName === name) {\n        return callback(module);\n      }\n    });\n  };\n  Quill.prototype.prepareFormat = function (name, value) {\n    var format, range;\n    format = this.editor.doc.formats[name];\n    if (format == null) {\n      return;\n    }\n    range = this.getSelection();\n    if (!(range != null ? range.isCollapsed() : void 0)) {\n      return;\n    }\n    if (format.isType(Format.types.LINE)) {\n      return this.formatLine(range, name, value, Quill.sources.USER);\n    } else {\n      return format.prepare(value);\n    }\n  };\n  Quill.prototype.setContents = function (delta, source) {\n    if (source == null) {\n      source = Quill.sources.API;\n    }\n    if (_.isArray(delta)) {\n      delta = {\n        ops: delta\n      };\n    }\n    delta.ops.unshift({\n      \"delete\": this.getLength()\n    });\n    return this.updateContents(delta, source);\n  };\n  Quill.prototype.setHTML = function (html, source) {\n    if (source == null) {\n      source = Quill.sources.API;\n    }\n    if (!html) {\n      html = \"<\" + dom.DEFAULT_BLOCK_TAG + \"><\" + dom.DEFAULT_BREAK_TAG + \"></\" + dom.DEFAULT_BLOCK_TAG + \">\";\n    }\n    this.editor.doc.setHTML(html);\n    return this.editor.checkUpdate(source);\n  };\n  Quill.prototype.setSelection = function (start, end, source) {\n    var range;\n    if (source == null) {\n      source = Quill.sources.API;\n    }\n    if (_.isNumber(start) && _.isNumber(end)) {\n      range = new Range(start, end);\n    } else {\n      range = start;\n      source = end || source;\n    }\n    return this.editor.selection.setRange(range, source);\n  };\n  Quill.prototype.updateContents = function (delta, source) {\n    if (source == null) {\n      source = Quill.sources.API;\n    }\n    return this.editor.applyDelta(delta, source);\n  };\n  Quill.prototype._buildParams = function () {\n    var formats, params;\n    params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    if (_.isObject(params[0])) {\n      params.splice(0, 1, params[0].start, params[0].end);\n    }\n    if (_.isString(params[2])) {\n      formats = {};\n      formats[params[2]] = params[3];\n      params.splice(2, 2, formats);\n    }\n    if (params[3] == null) {\n      params[3] = Quill.sources.API;\n    }\n    return params;\n  };\n  return Quill;\n}(EventEmitter2);\nQuill.registerTheme('default', require('./themes/default'));\nQuill.registerTheme('snow', require('./themes/snow'));\nmodule.exports = Quill;","map":null,"metadata":{},"sourceType":"script"}