{"ast":null,"code":"var Delta, Keyboard, Quill, dom, _;\nQuill = require('../quill');\n_ = Quill.require('lodash');\ndom = Quill.require('dom');\nDelta = Quill.require('delta');\nKeyboard = function () {\n  Keyboard.hotkeys = {\n    BOLD: {\n      key: 'B',\n      metaKey: true\n    },\n    INDENT: {\n      key: dom.KEYS.TAB\n    },\n    ITALIC: {\n      key: 'I',\n      metaKey: true\n    },\n    OUTDENT: {\n      key: dom.KEYS.TAB,\n      shiftKey: true\n    },\n    UNDERLINE: {\n      key: 'U',\n      metaKey: true\n    }\n  };\n  function Keyboard(quill, options) {\n    this.quill = quill;\n    this.hotkeys = {};\n    this._initListeners();\n    this._initHotkeys();\n    this._initDeletes();\n  }\n  Keyboard.prototype.addHotkey = function (hotkeys, callback) {\n    if (!_.isArray(hotkeys)) {\n      hotkeys = [hotkeys];\n    }\n    return _.each(hotkeys, function (_this) {\n      return function (hotkey) {\n        var which, _base;\n        hotkey = _.isObject(hotkey) ? _.clone(hotkey) : {\n          key: hotkey\n        };\n        hotkey.callback = callback;\n        which = _.isNumber(hotkey.key) ? hotkey.key : hotkey.key.toUpperCase().charCodeAt(0);\n        if ((_base = _this.hotkeys)[which] == null) {\n          _base[which] = [];\n        }\n        return _this.hotkeys[which].push(hotkey);\n      };\n    }(this));\n  };\n  Keyboard.prototype.toggleFormat = function (range, format) {\n    var delta, toolbar, value;\n    if (range.isCollapsed()) {\n      delta = this.quill.getContents(Math.max(0, range.start - 1), range.end);\n    } else {\n      delta = this.quill.getContents(range);\n    }\n    value = delta.ops.length === 0 || !_.all(delta.ops, function (op) {\n      var _ref;\n      return (_ref = op.attributes) != null ? _ref[format] : void 0;\n    });\n    if (range.isCollapsed()) {\n      this.quill.prepareFormat(format, value);\n    } else {\n      this.quill.formatText(range, format, value, 'user');\n    }\n    toolbar = this.quill.getModule('toolbar');\n    if (toolbar != null) {\n      return toolbar.setActive(format, value);\n    }\n  };\n  Keyboard.prototype._initDeletes = function () {\n    return this.addHotkey([dom.KEYS.DELETE, dom.KEYS.BACKSPACE], function (_this) {\n      return function () {\n        return _this.quill.getLength() > 1;\n      };\n    }(this));\n  };\n  Keyboard.prototype._initHotkeys = function () {\n    this.addHotkey(Keyboard.hotkeys.INDENT, function (_this) {\n      return function (range) {\n        _this._onTab(range, false);\n        return false;\n      };\n    }(this));\n    this.addHotkey(Keyboard.hotkeys.OUTDENT, function (_this) {\n      return function (range) {\n        return false;\n      };\n    }(this));\n    return _.each(['bold', 'italic', 'underline'], function (_this) {\n      return function (format) {\n        return _this.addHotkey(Keyboard.hotkeys[format.toUpperCase()], function (range) {\n          _this.toggleFormat(range, format);\n          return false;\n        });\n      };\n    }(this));\n  };\n  Keyboard.prototype._initListeners = function () {\n    return dom(this.quill.root).on('keydown', function (_this) {\n      return function (event) {\n        var prevent;\n        prevent = false;\n        _.each(_this.hotkeys[event.which], function (hotkey) {\n          var metaKey;\n          metaKey = dom.isMac() ? event.metaKey : event.metaKey || event.ctrlKey;\n          if (!!hotkey.metaKey !== !!metaKey) {\n            return;\n          }\n          if (!!hotkey.shiftKey !== !!event.shiftKey) {\n            return;\n          }\n          if (!!hotkey.altKey !== !!event.altKey) {\n            return;\n          }\n          prevent = hotkey.callback(_this.quill.getSelection()) === false || prevent;\n          return true;\n        });\n        return !prevent;\n      };\n    }(this));\n  };\n  Keyboard.prototype._onTab = function (range, shift) {\n    var delta;\n    if (shift == null) {\n      shift = false;\n    }\n    delta = new Delta().retain(range.start).insert(\"\\t\")[\"delete\"](range.end - range.start).retain(this.quill.getLength() - range.end);\n    this.quill.updateContents(delta);\n    return this.quill.setSelection(range.start + 1, range.start + 1);\n  };\n  return Keyboard;\n}();\nQuill.registerModule('keyboard', Keyboard);\nmodule.exports = Keyboard;","map":null,"metadata":{},"sourceType":"script"}