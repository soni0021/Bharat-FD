{"ast":null,"code":"var Normalizer, dom, _;\n_ = require('lodash');\ndom = require('./dom');\nNormalizer = {\n  ALIASES: {\n    'STRONG': 'B',\n    'EM': 'I',\n    'DEL': 'S',\n    'STRIKE': 'S'\n  },\n  ATTRIBUTES: {\n    'color': 'color',\n    'face': 'fontFamily',\n    'size': 'fontSize'\n  },\n  STYLES: {\n    'background-color': 'background-color',\n    'color': 'color',\n    'font-family': 'font-family',\n    'font-size': 'font-size',\n    'text-align': 'text-align'\n  },\n  TAGS: {\n    'DIV': 'DIV',\n    'BR': 'BR',\n    'SPAN': 'SPAN',\n    'B': 'B',\n    'I': 'I',\n    'S': 'S',\n    'U': 'U',\n    'A': 'A',\n    'IMG': 'IMG',\n    'OL': 'OL',\n    'UL': 'UL',\n    'LI': 'LI'\n  },\n  handleBreaks: function (lineNode) {\n    var breaks;\n    breaks = _.map(lineNode.querySelectorAll(dom.DEFAULT_BREAK_TAG));\n    _.each(breaks, function (_this) {\n      return function (br) {\n        if (br.nextSibling != null && (!dom.isIE(10) || br.previousSibling != null)) {\n          return dom(br.nextSibling).splitAncestors(lineNode.parentNode);\n        }\n      };\n    }(this));\n    return lineNode;\n  },\n  normalizeLine: function (lineNode) {\n    lineNode = Normalizer.wrapInline(lineNode);\n    lineNode = Normalizer.handleBreaks(lineNode);\n    lineNode = Normalizer.pullBlocks(lineNode);\n    lineNode = Normalizer.normalizeNode(lineNode);\n    Normalizer.unwrapText(lineNode);\n    if (lineNode != null && dom.LIST_TAGS[lineNode.tagName] != null) {\n      lineNode = lineNode.firstChild;\n    }\n    return lineNode;\n  },\n  normalizeNode: function (node) {\n    if (dom(node).isTextNode()) {\n      return node;\n    }\n    _.each(Normalizer.ATTRIBUTES, function (style, attribute) {\n      var value;\n      if (node.hasAttribute(attribute)) {\n        value = node.getAttribute(attribute);\n        if (attribute === 'size') {\n          value = dom.convertFontSize(value);\n        }\n        node.style[style] = value;\n        return node.removeAttribute(attribute);\n      }\n    });\n    Normalizer.whitelistStyles(node);\n    return Normalizer.whitelistTags(node);\n  },\n  optimizeLine: function (lineNode) {\n    var lineNodeLength, node, nodes, _results;\n    lineNodeLength = dom(lineNode).length();\n    nodes = dom(lineNode).descendants();\n    _results = [];\n    while (nodes.length > 0) {\n      node = nodes.pop();\n      if ((node != null ? node.parentNode : void 0) == null) {\n        continue;\n      }\n      if (dom.EMBED_TAGS[node.tagName] != null) {\n        continue;\n      }\n      if (node.tagName === dom.DEFAULT_BREAK_TAG) {\n        if (lineNodeLength !== 0) {\n          _results.push(dom(node).remove());\n        } else {\n          _results.push(void 0);\n        }\n      } else if (dom(node).length() === 0) {\n        nodes.push(node.nextSibling);\n        _results.push(dom(node).unwrap());\n      } else if (node.previousSibling != null && node.tagName === node.previousSibling.tagName) {\n        if (_.isEqual(dom(node).attributes(), dom(node.previousSibling).attributes())) {\n          nodes.push(node.firstChild);\n          _results.push(dom(node.previousSibling).merge(node));\n        } else {\n          _results.push(void 0);\n        }\n      } else {\n        _results.push(void 0);\n      }\n    }\n    return _results;\n  },\n  pullBlocks: function (lineNode) {\n    var curNode;\n    curNode = lineNode.firstChild;\n    while (curNode != null) {\n      if (dom.BLOCK_TAGS[curNode.tagName] != null && curNode.tagName !== 'LI') {\n        if (curNode.previousSibling != null) {\n          dom(curNode).splitAncestors(lineNode.parentNode);\n        }\n        if (curNode.nextSibling != null) {\n          dom(curNode.nextSibling).splitAncestors(lineNode.parentNode);\n        }\n        if (dom.LIST_TAGS[curNode.tagName] == null || !curNode.firstChild) {\n          dom(curNode).unwrap();\n          Normalizer.pullBlocks(lineNode);\n        } else {\n          dom(curNode.parentNode).unwrap();\n          if (lineNode.parentNode == null) {\n            lineNode = curNode;\n          }\n        }\n        break;\n      }\n      curNode = curNode.nextSibling;\n    }\n    return lineNode;\n  },\n  stripComments: function (html) {\n    return html.replace(/<!--[\\s\\S]*?-->/g, '');\n  },\n  stripWhitespace: function (html) {\n    html = html.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    html = html.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    html = html.replace(/(\\r?\\n|\\r)+/g, ' ');\n    html = html.replace(/\\>\\s+\\</g, '><');\n    return html;\n  },\n  whitelistStyles: function (node) {\n    var original, styles;\n    original = dom(node).styles();\n    styles = _.omit(original, function (value, key) {\n      return Normalizer.STYLES[key] == null;\n    });\n    if (_.keys(styles).length < _.keys(original).length) {\n      if (_.keys(styles).length > 0) {\n        return dom(node).styles(styles, true);\n      } else {\n        return node.removeAttribute('style');\n      }\n    }\n  },\n  whitelistTags: function (node) {\n    if (!dom(node).isElement()) {\n      return node;\n    }\n    if (Normalizer.ALIASES[node.tagName] != null) {\n      node = dom(node).switchTag(Normalizer.ALIASES[node.tagName]);\n    } else if (Normalizer.TAGS[node.tagName] == null) {\n      if (dom.BLOCK_TAGS[node.tagName] != null) {\n        node = dom(node).switchTag(dom.DEFAULT_BLOCK_TAG);\n      } else if (!node.hasAttributes() && node.firstChild != null) {\n        node = dom(node).unwrap();\n      } else {\n        node = dom(node).switchTag(dom.DEFAULT_INLINE_TAG);\n      }\n    }\n    return node;\n  },\n  wrapInline: function (lineNode) {\n    var blockNode, nextNode;\n    if (dom.BLOCK_TAGS[lineNode.tagName] != null) {\n      return lineNode;\n    }\n    blockNode = lineNode.ownerDocument.createElement(dom.DEFAULT_BLOCK_TAG);\n    lineNode.parentNode.insertBefore(blockNode, lineNode);\n    while (lineNode != null && dom.BLOCK_TAGS[lineNode.tagName] == null) {\n      nextNode = lineNode.nextSibling;\n      blockNode.appendChild(lineNode);\n      lineNode = nextNode;\n    }\n    return blockNode;\n  },\n  unwrapText: function (lineNode) {\n    var spans;\n    spans = _.map(lineNode.querySelectorAll(dom.DEFAULT_INLINE_TAG));\n    return _.each(spans, function (span) {\n      if (!span.hasAttributes()) {\n        return dom(span).unwrap();\n      }\n    });\n  }\n};\nmodule.exports = Normalizer;","map":null,"metadata":{},"sourceType":"script"}