{"ast":null,"code":"var Authorship, Delta, Quill, dom, _;\nQuill = require('../quill');\n_ = Quill.require('lodash');\ndom = Quill.require('dom');\nDelta = Quill.require('delta');\nAuthorship = function () {\n  Authorship.DEFAULTS = {\n    authorId: null,\n    color: 'transparent',\n    enabled: false\n  };\n  function Authorship(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    if (this.options.button != null) {\n      this.attachButton(this.options.button);\n    }\n    if (this.options.enabled) {\n      this.enable();\n    }\n    this.quill.addFormat('author', {\n      \"class\": 'author-'\n    });\n    if (this.options.authorId == null) {\n      return;\n    }\n    this.quill.on(this.quill.constructor.events.PRE_EVENT, function (_this) {\n      return function (eventName, delta, origin) {\n        var authorDelta, authorFormat;\n        if (eventName === _this.quill.constructor.events.TEXT_CHANGE && origin === 'user') {\n          authorDelta = new Delta();\n          authorFormat = {\n            author: _this.options.authorId\n          };\n          _.each(delta.ops, function (op) {\n            if (op[\"delete\"] != null) {\n              return;\n            }\n            if (op.insert != null || op.retain != null && op.attributes != null) {\n              op.attributes || (op.attributes = {});\n              op.attributes.author = _this.options.authorId;\n              return authorDelta.retain(op.retain || op.insert.length || 1, authorFormat);\n            } else {\n              return authorDelta.retain(op.retain);\n            }\n          });\n          return _this.quill.updateContents(authorDelta, Quill.sources.SILENT);\n        }\n      };\n    }(this));\n    this.addAuthor(this.options.authorId, this.options.color);\n  }\n  Authorship.prototype.addAuthor = function (id, color) {\n    var styles;\n    styles = {};\n    styles[\".authorship .author-\" + id] = {\n      \"background-color\": \"\" + color\n    };\n    return this.quill.addStyles(styles);\n  };\n  Authorship.prototype.attachButton = function (button) {\n    var $button;\n    $button = dom(button);\n    return $button.on('click', function (_this) {\n      return function () {\n        $button.toggleClass('ql-on');\n        return _this.enable($dom.hasClass('ql-on'));\n      };\n    }(this));\n  };\n  Authorship.prototype.enable = function (enabled) {\n    if (enabled == null) {\n      enabled = true;\n    }\n    return dom(this.quill.root).toggleClass('authorship', enabled);\n  };\n  Authorship.prototype.disable = function () {\n    return this.enable(false);\n  };\n  return Authorship;\n}();\nQuill.registerModule('authorship', Authorship);\nmodule.exports = Authorship;","map":null,"metadata":{},"sourceType":"script"}