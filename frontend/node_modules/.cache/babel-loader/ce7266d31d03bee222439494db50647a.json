{"ast":null,"code":"var Document, Editor, Line, Renderer, Selection, dom, _;\n_ = require('lodash');\ndom = require('../lib/dom');\nDocument = require('./document');\nLine = require('./line');\nRenderer = require('./renderer');\nSelection = require('./selection');\nEditor = function () {\n  Editor.sources = {\n    API: 'api',\n    SILENT: 'silent',\n    USER: 'user'\n  };\n  function Editor(iframeContainer, quill, options) {\n    this.iframeContainer = iframeContainer;\n    this.quill = quill;\n    this.options = options != null ? options : {};\n    this.renderer = new Renderer(this.iframeContainer, this.options);\n    dom(this.iframeContainer).on('focus', this.focus.bind(this));\n    this.root = this.renderer.root;\n    this.doc = new Document(this.root, this.options);\n    this.delta = this.doc.toDelta();\n    this.selection = new Selection(this.doc, this.renderer.iframe, this.quill);\n    this.timer = setInterval(_.bind(this.checkUpdate, this), this.options.pollInterval);\n    if (!this.options.readOnly) {\n      this.enable();\n    }\n  }\n  Editor.prototype.disable = function () {\n    return this.enable(false);\n  };\n  Editor.prototype.enable = function (enabled) {\n    if (enabled == null) {\n      enabled = true;\n    }\n    return this.root.setAttribute('contenteditable', enabled);\n  };\n  Editor.prototype.applyDelta = function (delta, source) {\n    var localDelta;\n    localDelta = this._update();\n    if (localDelta) {\n      delta = localDelta.transform(delta, true);\n      localDelta = delta.transform(localDelta, false);\n    }\n    if (delta.ops.length > 0) {\n      delta = this._trackDelta(function (_this) {\n        return function () {\n          var index;\n          index = 0;\n          _.each(delta.ops, function (op) {\n            if (_.isString(op.insert)) {\n              _this._insertAt(index, op.insert, op.attributes);\n              return index += op.insert.length;\n            } else if (_.isNumber(op.insert)) {\n              _this._insertAt(index, dom.EMBED_TEXT, op.attributes);\n              return index += 1;\n            } else if (_.isNumber(op[\"delete\"])) {\n              return _this._deleteAt(index, op[\"delete\"]);\n            } else if (_.isNumber(op.retain)) {\n              _.each(op.attributes, function (value, name) {\n                return _this._formatAt(index, op.retain, name, value);\n              });\n              return index += op.retain;\n            }\n          });\n          return _this.selection.shiftAfter(0, 0, _.bind(_this.doc.optimizeLines, _this.doc));\n        };\n      }(this));\n      this.delta = this.doc.toDelta();\n      this.innerHTML = this.root.innerHTML;\n      if (delta && source !== Editor.sources.SILENT) {\n        this.quill.emit(this.quill.constructor.events.TEXT_CHANGE, delta, source);\n      }\n    }\n    if (localDelta && localDelta.ops.length > 0 && source !== Editor.sources.SILENT) {\n      return this.quill.emit(this.quill.constructor.events.TEXT_CHANGE, localDelta, Editor.sources.USER);\n    }\n  };\n  Editor.prototype.checkUpdate = function (source) {\n    var delta;\n    if (source == null) {\n      source = 'user';\n    }\n    if (this.renderer.iframe.parentNode == null || this.root.parentNode == null) {\n      return clearInterval(this.timer);\n    }\n    delta = this._update();\n    if (delta) {\n      this.delta.compose(delta);\n      this.quill.emit(this.quill.constructor.events.TEXT_CHANGE, delta, source);\n    }\n    if (delta) {\n      source = Editor.sources.SILENT;\n    }\n    return this.selection.update(source);\n  };\n  Editor.prototype.focus = function () {\n    if (dom.isIE(11)) {\n      this.selection.setRange(this.selection.range);\n    }\n    if (dom.isIOS()) {\n      this.renderer.iframe.focus();\n    }\n    return this.root.focus();\n  };\n  Editor.prototype.getDelta = function () {\n    return this.delta;\n  };\n  Editor.prototype._deleteAt = function (index, length) {\n    if (length <= 0) {\n      return;\n    }\n    return this.selection.shiftAfter(index, -1 * length, function (_this) {\n      return function () {\n        var curLine, deleteLength, firstLine, mergeFirstLine, nextLine, offset, _ref;\n        _ref = _this.doc.findLineAt(index), firstLine = _ref[0], offset = _ref[1];\n        curLine = firstLine;\n        mergeFirstLine = firstLine.length - offset <= length && offset > 0;\n        while (curLine != null && length > 0) {\n          nextLine = curLine.next;\n          deleteLength = Math.min(curLine.length - offset, length);\n          if (offset === 0 && length >= curLine.length) {\n            _this.doc.removeLine(curLine);\n          } else {\n            curLine.deleteText(offset, deleteLength);\n          }\n          length -= deleteLength;\n          curLine = nextLine;\n          offset = 0;\n        }\n        if (mergeFirstLine && firstLine.next) {\n          return _this.doc.mergeLines(firstLine, firstLine.next);\n        }\n      };\n    }(this));\n  };\n  Editor.prototype._formatAt = function (index, length, name, value) {\n    return this.selection.shiftAfter(index, 0, function (_this) {\n      return function () {\n        var formatLength, line, offset, _ref, _results;\n        _ref = _this.doc.findLineAt(index), line = _ref[0], offset = _ref[1];\n        _results = [];\n        while (line != null && length > 0) {\n          formatLength = Math.min(length, line.length - offset - 1);\n          line.formatText(offset, formatLength, name, value);\n          length -= formatLength;\n          if (length > 0) {\n            line.format(name, value);\n          }\n          length -= 1;\n          offset = 0;\n          _results.push(line = line.next);\n        }\n        return _results;\n      };\n    }(this));\n  };\n  Editor.prototype._insertAt = function (index, text, formatting) {\n    if (formatting == null) {\n      formatting = {};\n    }\n    return this.selection.shiftAfter(index, text.length, function (_this) {\n      return function () {\n        var line, lineTexts, offset, _ref;\n        text = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n        lineTexts = text.split('\\n');\n        _ref = _this.doc.findLineAt(index), line = _ref[0], offset = _ref[1];\n        return _.each(lineTexts, function (lineText, i) {\n          var nextLine;\n          if (line == null || line.length <= offset) {\n            if (i < lineTexts.length - 1 || lineText.length > 0) {\n              line = _this.doc.appendLine(_this.root.ownerDocument.createElement(dom.DEFAULT_BLOCK_TAG));\n              offset = 0;\n              line.insertText(offset, lineText, formatting);\n              line.format(formatting);\n              nextLine = null;\n            }\n          } else {\n            line.insertText(offset, lineText, formatting);\n            if (i < lineTexts.length - 1) {\n              nextLine = _this.doc.splitLine(line, offset + lineText.length);\n              _.each(_.defaults({}, formatting, line.formats), function (value, format) {\n                return line.format(format, formatting[format]);\n              });\n              offset = 0;\n            }\n          }\n          return line = nextLine;\n        });\n      };\n    }(this));\n  };\n  Editor.prototype._trackDelta = function (fn) {\n    var delta, newDelta;\n    fn();\n    newDelta = this.doc.toDelta();\n    delta = this.delta.diff(newDelta);\n    return delta;\n  };\n  Editor.prototype._update = function () {\n    var delta;\n    if (this.innerHTML === this.root.innerHTML) {\n      return false;\n    }\n    delta = this._trackDelta(function (_this) {\n      return function () {\n        _this.selection.preserve(_.bind(_this.doc.rebuild, _this.doc));\n        return _this.selection.shiftAfter(0, 0, _.bind(_this.doc.optimizeLines, _this.doc));\n      };\n    }(this));\n    this.innerHTML = this.root.innerHTML;\n    if (delta.ops.length > 0) {\n      return delta;\n    } else {\n      return false;\n    }\n  };\n  return Editor;\n}();\nmodule.exports = Editor;","map":null,"metadata":{},"sourceType":"script"}