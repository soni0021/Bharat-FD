{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory(require(\"react\"), require(\"quilljs\"));else if (typeof define === 'function' && define.amd) define([\"react\", \"quilljs\"], factory);else if (typeof exports === 'object') exports[\"ReactQuill\"] = factory(require(\"react\"), require(\"quilljs\"));else root[\"ReactQuill\"] = factory(root[\"React\"], root[\"Quill\"]);\n})(this, function (__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {\n  return /******/function (modules) {\n    // webpackBootstrap\n    /******/ // The module cache\n    /******/\n    var installedModules = {};\n    /******/\n    /******/ // The require function\n    /******/\n    function __webpack_require__(moduleId) {\n      /******/\n      /******/ // Check if module is in cache\n      /******/if (installedModules[moduleId]) /******/return installedModules[moduleId].exports;\n      /******/\n      /******/ // Create a new module (and put it into the cache)\n      /******/\n      var module = installedModules[moduleId] = {\n        /******/exports: {},\n        /******/id: moduleId,\n        /******/loaded: false\n        /******/\n      };\n      /******/\n      /******/ // Execute the module function\n      /******/\n      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n      /******/\n      /******/ // Flag the module as loaded\n      /******/\n      module.loaded = true;\n      /******/\n      /******/ // Return the exports of the module\n      /******/\n      return module.exports;\n      /******/\n    }\n    /******/\n    /******/\n    /******/ // expose the modules object (__webpack_modules__)\n    /******/\n    __webpack_require__.m = modules;\n    /******/\n    /******/ // expose the module cache\n    /******/\n    __webpack_require__.c = installedModules;\n    /******/\n    /******/ // __webpack_public_path__\n    /******/\n    __webpack_require__.p = \"\";\n    /******/\n    /******/ // Load entry module and return exports\n    /******/\n    return __webpack_require__(0);\n    /******/\n  }\n  /************************************************************************/\n  /******/([/* 0 */\n  /*!**********************!*\\\n    !*** ./src/index.js ***!\n    \\**********************/\n  /***/function (module, exports, __webpack_require__) {\n    /*\n    React-Quill 0.0.2\n    https://github.com/zenoamaro/react-quill\n    */\n    module.exports = __webpack_require__(/*! ./component */1);\n    module.exports.Mixin = __webpack_require__(/*! ./mixin */2);\n    module.exports.Toolbar = __webpack_require__(/*! ./toolbar */3);\n\n    /***/\n  }, /* 1 */\n  /*!**************************!*\\\n    !*** ./src/component.js ***!\n    \\**************************/\n  /***/function (module, exports, __webpack_require__) {\n    'use strict';\n\n    var React = __webpack_require__(/*! react */4),\n      QuillToolbar = __webpack_require__(/*! ./toolbar */3),\n      QuillMixin = __webpack_require__(/*! ./mixin */2),\n      T = React.PropTypes;\n\n    // Support React 0.11 and 0.12\n    // FIXME: Remove with React 0.13\n    if (React.createFactory) {\n      QuillToolbar = React.createFactory(QuillToolbar);\n    }\n    var QuillComponent = React.createClass({\n      displayName: 'Quill',\n      mixins: [QuillMixin],\n      propTypes: {\n        id: T.string,\n        className: T.string,\n        value: T.string,\n        defaultValue: T.string,\n        readOnly: T.bool,\n        toolbar: T.object,\n        formats: T.array,\n        styles: T.object,\n        theme: T.string,\n        pollInterval: T.number,\n        onChange: T.func\n      },\n      getDefaultProps: function () {\n        return {\n          className: '',\n          modules: {}\n        };\n      },\n      /*\n      Retrieve the initial value from either `value` (preferred)\n      or `defaultValue` if you want an un-controlled component.\n      */\n      getInitialState: function () {\n        return {};\n      },\n      /*\n      Update only if we've been passed a new `value`.\n      This leaves components using `defaultValue` alone.\n      */\n      componentWillReceiveProps: function (nextProps) {\n        if ('value' in nextProps) {\n          if (nextProps.value !== this.props.value) {\n            this.setEditorContents(this.state.editor, nextProps.value);\n          }\n        }\n      },\n      componentDidMount: function () {\n        var editor = this.createEditor(this.getEditorElement(), this.getEditorConfig());\n        this.setState({\n          editor: editor\n        });\n      },\n      componentWillUnmount: function () {\n        this.destroyEditor(this.state.editor);\n      },\n      shouldComponentUpdate: function (nextProps, nextState) {\n        // Never re-render or we lose the element.\n        return false;\n      },\n      /*\n      If for whatever reason we are rendering again,\n      we should tear down the editor and bring it up\n      again.\n      */\n      componentWillUpdate: function () {\n        this.componentWillUnmount();\n      },\n      componentDidUpdate: function () {\n        this.componentDidMount();\n      },\n      getEditorConfig: function () {\n        var config = {\n          readOnly: this.props.readOnly,\n          theme: this.props.theme,\n          formats: this.props.formats,\n          styles: this.props.styles,\n          modules: this.props.modules,\n          pollInterval: this.props.pollInterval\n        };\n        // Unless we're redefining the toolbar,\n        // attach to the default one as a ref.\n        if (!config.modules.toolbar) {\n          // Don't mutate the original modules\n          // because it's shared between components.\n          config.modules = JSON.parse(JSON.stringify(config.modules));\n          config.modules.toolbar = {\n            container: this.refs.toolbar.getDOMNode()\n          };\n        }\n        return config;\n      },\n      getEditorElement: function () {\n        return this.refs.editor.getDOMNode();\n      },\n      getEditorContents: function () {\n        return this.props.value || this.props.defaultValue;\n      },\n      getClassName: function () {\n        return ['quill', this.props.className].join(' ');\n      },\n      /*\n      Renders either the specified contents, or a default\n      configuration of toolbar and contents area.\n      */\n      renderContents: function () {\n        if (React.Children.count(this.props.children) > 0) {\n          return React.Children.only(this.props.children);\n        } else {\n          return [QuillToolbar({\n            key: 'toolbar',\n            ref: 'toolbar',\n            items: this.props.toolbar\n          }), React.DOM.div({\n            key: 'editor',\n            ref: 'editor',\n            className: 'quill-contents',\n            dangerouslySetInnerHTML: {\n              __html: this.getEditorContents()\n            }\n          })];\n        }\n      },\n      render: function () {\n        return React.DOM.div({\n          className: this.getClassName(),\n          onChange: this.preventDefault\n        }, this.renderContents());\n      },\n      /*\n      Updates the local state with the new contents,\n      executes the change handler passed as props.\n      */\n      onEditorChange: function (value) {\n        if (value !== this.state.value) {\n          if (this.props.onChange) {\n            this.props.onChange(value);\n          }\n        }\n      },\n      /*\n      Stop change events from the toolbar from\n      bubbling up outside.\n      */\n      preventDefault: function (event) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    });\n    module.exports = QuillComponent;\n\n    /***/\n  }, /* 2 */\n  /*!**********************!*\\\n    !*** ./src/mixin.js ***!\n    \\**********************/\n  /***/function (module, exports, __webpack_require__) {\n    'use strict';\n\n    var React = __webpack_require__(/*! react */4),\n      Quill = __webpack_require__(/*! quilljs */5),\n      T = React.PropTypes;\n    var QuillMixin = {\n      /**\n      Creates an editor on the given element. The editor will\n      be passed the configuration, have its events bound,\n      */\n      createEditor: function ($el, config) {\n        var editor = new Quill($el, config);\n        this.hookEditor(editor);\n        return editor;\n      },\n      hookEditor: function (editor) {\n        var self = this;\n        editor.on('text-change', function (delta, source) {\n          if (self.onEditorChange) {\n            self.onEditorChange(editor.getHTML(), delta, source);\n          }\n        });\n      },\n      updateEditor: function (editor, config) {\n        // TODO: Unfortunately, while we can add modules and\n        //       stuff, we can't remove them. And there is\n        //       little API to update other parts of the config.\n        //       But if we could tear down the editor, at least\n        //       we could do a re-init with the new config.\n        throw new Error('Not implemented');\n      },\n      destroyEditor: function (editor) {\n        // TODO: How to destroy this?\n        // editor.destroy();\n        editor.removeAllListeners();\n      },\n      /*\n      Replace the contents of the editor, but keep\n      the previous selection hanging around so that\n      the cursor won't move.\n      */\n      setEditorContents: function (editor, value) {\n        var sel = editor.getSelection();\n        editor.setHTML(value);\n        editor.setSelection(sel);\n      }\n    };\n    module.exports = QuillMixin;\n\n    /***/\n  }, /* 3 */\n  /*!************************!*\\\n    !*** ./src/toolbar.js ***!\n    \\************************/\n  /***/function (module, exports, __webpack_require__) {\n    'use strict';\n\n    var React = __webpack_require__(/*! react */4),\n      T = React.PropTypes;\n    var defaultItems = [{\n      label: 'Formats',\n      type: 'group',\n      items: [{\n        label: 'Size',\n        type: 'size',\n        items: [{\n          label: 'Normal',\n          value: ''\n        }, {\n          label: 'Smaller',\n          value: '0.8em'\n        }, {\n          label: 'Larger',\n          value: '1.4em'\n        }, {\n          label: 'Huge',\n          value: '2em'\n        }]\n      }, {\n        label: 'Alignment',\n        type: 'align',\n        items: [{\n          label: 'Center',\n          value: 'center'\n        }, {\n          label: 'Left',\n          value: 'left'\n        }, {\n          label: 'Right',\n          value: 'right'\n        }, {\n          label: 'Justify',\n          value: 'justify'\n        }]\n      }]\n    }, {\n      label: 'Text',\n      type: 'group',\n      items: [{\n        type: 'bold',\n        label: 'Bold'\n      }, {\n        type: 'italic',\n        label: 'Italic'\n      }, {\n        type: 'strike',\n        label: 'Strike'\n      }, {\n        type: 'underline',\n        label: 'Underline'\n      }, {\n        type: 'link',\n        label: 'Link'\n      }]\n    }, {\n      label: 'Blocks',\n      type: 'group',\n      items: [{\n        type: 'bullet',\n        label: 'Bullet'\n      }, {\n        type: 'list',\n        label: 'List'\n      }]\n    }];\n    var QuillToolbar = React.createClass({\n      displayName: 'Quill Toolbar',\n      propTypes: {\n        id: T.string,\n        className: T.string,\n        items: T.array\n      },\n      getDefaultProps: function () {\n        return {\n          items: defaultItems\n        };\n      },\n      renderGroup: function (item) {\n        return React.DOM.span({\n          key: item.label,\n          className: 'ql-format-group'\n        }, item.items.map(this.renderItem));\n      },\n      renderChoiceItem: function (item) {\n        return React.DOM.option({\n          key: item.label || item.value,\n          value: item.value\n        }, item.label);\n      },\n      renderChoices: function (item) {\n        return React.DOM.select({\n          key: item.label,\n          className: 'ql-' + item.type\n        }, item.items.map(this.renderChoiceItem));\n      },\n      renderAction: function (item) {\n        return React.DOM.span({\n          key: item.label || item.value,\n          className: 'ql-format-button ql-' + item.type,\n          title: item.label\n        });\n      },\n      renderItem: function (item) {\n        var mapping = {\n          'group': this.renderGroup,\n          'align': this.renderChoices,\n          'size': this.renderChoices,\n          'action': this.renderAction\n        };\n        var renderer = mapping[item.type] || mapping.action;\n        return renderer(item);\n      },\n      getClassName: function () {\n        return 'quill-toolbar ' + (this.props.className || '');\n      },\n      render: function () {\n        return React.DOM.div({\n          className: this.getClassName()\n        }, this.props.items.map(this.renderItem));\n      }\n    });\n    module.exports = QuillToolbar;\n\n    /***/\n  }, /* 4 */\n  /*!**************************************************************************************!*\\\n    !*** external {\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\",\"root\":\"React\"} ***!\n    \\**************************************************************************************/\n  /***/function (module, exports, __webpack_require__) {\n    module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n    /***/\n  }, /* 5 */\n  /*!********************************************************************************************!*\\\n    !*** external {\"commonjs\":\"quilljs\",\"commonjs2\":\"quilljs\",\"amd\":\"quilljs\",\"root\":\"Quill\"} ***!\n    \\********************************************************************************************/\n  /***/function (module, exports, __webpack_require__) {\n    module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n    /***/\n  }\n  /******/]);\n});","map":null,"metadata":{},"sourceType":"script"}