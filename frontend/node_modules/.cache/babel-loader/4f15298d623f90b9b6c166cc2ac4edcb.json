{"ast":null,"code":"var Quill, Toolbar, dom, _;\nQuill = require('../quill');\n_ = Quill.require('lodash');\ndom = Quill.require('dom');\nToolbar = function () {\n  Toolbar.DEFAULTS = {\n    container: null\n  };\n  Toolbar.formats = {\n    LINE: {\n      'align': 'align',\n      'bullet': 'bullet',\n      'list': 'list'\n    },\n    SELECT: {\n      'align': 'align',\n      'background': 'background',\n      'color': 'color',\n      'font': 'font',\n      'size': 'size'\n    },\n    TOGGLE: {\n      'bold': 'bold',\n      'bullet': 'bullet',\n      'image': 'image',\n      'italic': 'italic',\n      'link': 'link',\n      'list': 'list',\n      'strike': 'strike',\n      'underline': 'underline'\n    },\n    TOOLTIP: {\n      'image': 'image',\n      'link': 'link'\n    }\n  };\n  function Toolbar(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    if (this.options.container == null) {\n      throw new Error('container required for toolbar', this.options);\n    }\n    this.container = _.isString(this.options.container) ? document.querySelector(this.options.container) : this.options.container;\n    this.inputs = {};\n    this.preventUpdate = false;\n    this.triggering = false;\n    _.each(this.quill.options.formats, function (_this) {\n      return function (format) {\n        if (Toolbar.formats.TOOLTIP[format] != null) {\n          return;\n        }\n        return _this.initFormat(format, function (range, value) {\n          if (_this.triggering) {\n            return;\n          }\n          if (range.isCollapsed()) {\n            _this.quill.prepareFormat(format, value);\n          } else if (Toolbar.formats.LINE[format] != null) {\n            _this.quill.formatLine(range, format, value, 'user');\n          } else {\n            _this.quill.formatText(range, format, value, 'user');\n          }\n          return _.defer(function () {\n            _this.updateActive(range, ['bullet', 'list']);\n            return _this.setActive(format, value);\n          });\n        });\n      };\n    }(this));\n    this.quill.on(this.quill.constructor.events.SELECTION_CHANGE, function (_this) {\n      return function (range) {\n        if (range != null) {\n          return _this.updateActive(range);\n        }\n      };\n    }(this));\n    this.quill.onModuleLoad('keyboard', function (_this) {\n      return function (keyboard) {\n        return keyboard.addHotkey([dom.KEYS.BACKSPACE, dom.KEYS.DELETE, dom.KEYS.ENTER], function () {\n          return _.defer(_.bind(_this.updateActive, _this));\n        });\n      };\n    }(this));\n    dom(this.container).addClass('ql-toolbar-container');\n    if (dom.isIOS()) {\n      dom(this.container).addClass('ios');\n    }\n    if (dom.isIE(11)) {\n      dom(this.container).on('mousedown', function (_this) {\n        return function () {\n          return false;\n        };\n      }(this));\n    }\n  }\n  Toolbar.prototype.initFormat = function (format, callback) {\n    var eventName, input, selector;\n    selector = \".ql-\" + format;\n    if (Toolbar.formats.SELECT[format] != null) {\n      selector = \"select\" + selector;\n      eventName = 'change';\n    } else {\n      eventName = 'click';\n    }\n    input = this.container.querySelector(selector);\n    if (input == null) {\n      return;\n    }\n    this.inputs[format] = input;\n    return dom(input).on(eventName, function (_this) {\n      return function () {\n        var range, value;\n        value = eventName === 'change' ? dom(input).value() : !dom(input).hasClass('ql-active');\n        _this.preventUpdate = true;\n        _this.quill.focus();\n        range = _this.quill.getSelection();\n        if (range != null) {\n          callback(range, value);\n        }\n        _this.preventUpdate = false;\n        return true;\n      };\n    }(this));\n  };\n  Toolbar.prototype.setActive = function (format, value) {\n    var $input, input, selectValue, _ref;\n    input = this.inputs[format];\n    if (input == null) {\n      return;\n    }\n    $input = dom(input);\n    if (input.tagName === 'SELECT') {\n      this.triggering = true;\n      selectValue = $input.value(input);\n      if (value == null) {\n        value = (_ref = $input[\"default\"]()) != null ? _ref.value : void 0;\n      }\n      if (_.isArray(value)) {\n        value = '';\n      }\n      if (value !== selectValue) {\n        if (value != null) {\n          $input.option(value, false);\n        } else {\n          $input.reset(false);\n        }\n      }\n      return this.triggering = false;\n    } else {\n      return $input.toggleClass('ql-active', value || false);\n    }\n  };\n  Toolbar.prototype.updateActive = function (range, formats) {\n    var activeFormats;\n    if (formats == null) {\n      formats = null;\n    }\n    range || (range = this.quill.getSelection());\n    if (!(range != null && !this.preventUpdate)) {\n      return;\n    }\n    activeFormats = this._getActive(range);\n    return _.each(this.inputs, function (_this) {\n      return function (input, format) {\n        if (!_.isArray(formats) || formats.indexOf(format) > -1) {\n          _this.setActive(format, activeFormats[format]);\n        }\n        return true;\n      };\n    }(this));\n  };\n  Toolbar.prototype._getActive = function (range) {\n    var leafFormats, lineFormats;\n    leafFormats = this._getLeafActive(range);\n    lineFormats = this._getLineActive(range);\n    return _.defaults({}, leafFormats, lineFormats);\n  };\n  Toolbar.prototype._getLeafActive = function (range) {\n    var contents, formatsArr, line, offset, _ref;\n    if (range.isCollapsed()) {\n      _ref = this.quill.editor.doc.findLineAt(range.start), line = _ref[0], offset = _ref[1];\n      if (offset === 0) {\n        contents = this.quill.getContents(range.start, range.end + 1);\n      } else {\n        contents = this.quill.getContents(range.start - 1, range.end);\n      }\n    } else {\n      contents = this.quill.getContents(range);\n    }\n    formatsArr = _.map(contents.ops, 'attributes');\n    return this._intersectFormats(formatsArr);\n  };\n  Toolbar.prototype._getLineActive = function (range) {\n    var firstLine, formatsArr, lastLine, offset, _ref, _ref1;\n    formatsArr = [];\n    _ref = this.quill.editor.doc.findLineAt(range.start), firstLine = _ref[0], offset = _ref[1];\n    _ref1 = this.quill.editor.doc.findLineAt(range.end), lastLine = _ref1[0], offset = _ref1[1];\n    if (lastLine != null && lastLine === firstLine) {\n      lastLine = lastLine.next;\n    }\n    while (firstLine != null && firstLine !== lastLine) {\n      formatsArr.push(_.clone(firstLine.formats));\n      firstLine = firstLine.next;\n    }\n    return this._intersectFormats(formatsArr);\n  };\n  Toolbar.prototype._intersectFormats = function (formatsArr) {\n    return _.reduce(formatsArr.slice(1), function (activeFormats, formats) {\n      var activeKeys, added, formatKeys, intersection, missing;\n      activeKeys = _.keys(activeFormats);\n      formatKeys = _.keys(formats);\n      intersection = _.intersection(activeKeys, formatKeys);\n      missing = _.difference(activeKeys, formatKeys);\n      added = _.difference(formatKeys, activeKeys);\n      _.each(intersection, function (name) {\n        if (Toolbar.formats.SELECT[name] != null) {\n          if (_.isArray(activeFormats[name])) {\n            if (_.indexOf(activeFormats[name], formats[name]) < 0) {\n              return activeFormats[name].push(formats[name]);\n            }\n          } else if (activeFormats[name] !== formats[name]) {\n            return activeFormats[name] = [activeFormats[name], formats[name]];\n          }\n        }\n      });\n      _.each(missing, function (name) {\n        if (Toolbar.formats.TOGGLE[name] != null) {\n          return delete activeFormats[name];\n        } else if (Toolbar.formats.SELECT[name] != null && !_.isArray(activeFormats[name])) {\n          return activeFormats[name] = [activeFormats[name]];\n        }\n      });\n      _.each(added, function (name) {\n        if (Toolbar.formats.SELECT[name] != null) {\n          return activeFormats[name] = [formats[name]];\n        }\n      });\n      return activeFormats;\n    }, formatsArr[0] || {});\n  };\n  return Toolbar;\n}();\nQuill.registerModule('toolbar', Toolbar);\nmodule.exports = Toolbar;","map":null,"metadata":{},"sourceType":"script"}